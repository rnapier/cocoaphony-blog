<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Iphone | Cocoaphony]]></title>
  <link href="http://robnapier.net/blog/categories/iphone/atom.xml" rel="self"/>
  <link href="http://robnapier.net/"/>
  <updated>2014-01-14T09:49:29-05:00</updated>
  <id>http://robnapier.net/</id>
  <author>
    <name><![CDATA[Rob Napier]]></name>
    <email><![CDATA[robnapier@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Update on RNCryptor Vulnerability Fix]]></title>
    <link href="http://robnapier.net/rncryptor-vulnerability-fix/"/>
    <updated>2013-01-17T17:12:12-05:00</updated>
    <id>http://robnapier.net/rncryptor-vulnerability-fix</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve built a candidate fix for the RNCryptor <a href="http://robnapier.net/blog/rncryptor-hmac-vulnerability-827">HMAC vulnerability</a>. It&rsquo;s on a branch (<a href="https://github.com/rnapier/RNCryptor/tree/issue44">issue44</a>) currently, but I&rsquo;ll merge it to master next week if no one sees problems, and update the docs. By default it is incompatible with v1 files. If you need to be able to decrypt v1 files, you can define RNCRYPTOR_ALLOW_V1_BAD_HMAC when building.</p>

<p>Please let me know if anyone encounters issues.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RNCryptor HMAC Vulnerability (My Security Blunder)]]></title>
    <link href="http://robnapier.net/rncryptor-hmac-vulnerability/"/>
    <updated>2013-01-14T13:52:38-05:00</updated>
    <id>http://robnapier.net/rncryptor-hmac-vulnerability</id>
    <content type="html"><![CDATA[<p>Thank you to Allen Mann for discovering the following significant security vulnerability in RNCryptor.</p>

<h3>The Vulnerability</h3>


<p><a href="https://github.com/rnapier/RNCryptor">RNCryptor</a> computes the HMAC over the ciphertext only. It does not compute an HMAC over the header, particularly the IV. This allows an attacker to modify the IV and thus manipulate the first block (16-bytes) of decrypted plaintext. This is a major issue, and is exactly the kind of problem that RNCryptor is designed to avoid.</p>

<p>I will be modifying RNCryptor shortly to fix this. This will rev the file version to 2. I will provide a backward-compatibly option to read v1 files (default off). I strongly recommend that developers move to the v2 format.</p>

<p>I will try to get this out as quickly as I can, hopefully this week.</p>

<!-- more -->




<h3>The Lesson</h3>


<p>There is a valuable lesson here. I know this vulnerability in AES. I have <a href="http://cocoaconf.com/conference/sessionDetails/218?confId=7">given talks</a> about it. I&rsquo;ve demonstrated it with <a href="https://github.com/rnapier/security-blunders/blob/master/modaes.py">exploit code</a>. I wrote RNCryptor <em>explicitly</em> to avoid this vulnerability. Yet I screwed up the implementation and so RNCryptor is currently vulnerable to it.</p>

<p>I didn&rsquo;t find this problem myself. I&rsquo;m in the process of designing a different encrypted data format for a client, and I correctly compute the HMAC in that format, and I <em>still</em> didn&rsquo;t clue-in that I&rsquo;d done it wrong in RNCryptor.</p>

<p>How was it found? By someone who didn&rsquo;t just take my word for it. He looked at the implementation, saw the error, wrote his own exploit to prove it to himself, and informed me.</p>

<p>OpenSSL has been written by people very concerned with security. It&rsquo;s been <a href="http://www.kb.cert.org/vuls/byid?searchview&query=openssl">riddled with security bugs</a> over the years. (I wrote RNCryptor directly in response to the serious problems in its AES format.) <a href="http://www.kb.cert.org/vuls/byid?searchview&query=pgp">PGP</a>, <a href="http://www.kb.cert.org/vuls/byid?searchview&query=openssh">SSH</a>, <a href="http://www.kb.cert.org/vuls/byid?searchview&query=kerberos">Kerberos</a>, security protocols, formats, and implementations, even if built by smart people who are aware of the issues, they often have vulnerabilities. Some subtle, some bone-headed (like this one).</p>

<p>So what should you take away from this?</p>

<ol>
<li><p>Trust security systems in proportion to how much public scrutiny they receive. The more closed a system, the more it relies on proprietary and secret techniques, the less you should trust it. Open source systems have many errors. Don&rsquo;t imagine that proprietary systems have fewer; they just aren&rsquo;t found and fixed.</p></li>
<li><p>A security system is only as good as its implementation. The RNCryptor v1 format uses HMAC, which is good, but the implementation is slightly wrong and that creates a vulnerability. Just because your system uses AES and AES is strong doesn&rsquo;t mean that your system is secure.</p></li>
<li><p>You need to educate yourself on the basics of how cryptographic systems work. As a developer you need to be able to evaluate whether the cryptography framework you&rsquo;re using is secure, and even more critically you need to be able to evaluate whether you&rsquo;re using it securely. Common Cryptor&rsquo;s HMAC functions are fine, but if I pass the wrong data, the system is still insecure.</p></li>
<li><p>Assume that any security framework you have will need to be upgraded in the future, possibly in incompatible ways, to address vulnerabilities. Design your project to make upgrading as simple as possible.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Animating Arbitrary KeyPaths]]></title>
    <link href="http://robnapier.net/animating-arbitrary-keypaths/"/>
    <updated>2012-12-17T21:44:41-05:00</updated>
    <id>http://robnapier.net/animating-arbitrary-keypaths</id>
    <content type="html"><![CDATA[<p>During <a href="http://cocoaconf.com/raleigh-2012/home">CocoaConf-2012-Raleigh</a>, I discussed my PinchView from <a href="http://robnapier.net/blog/laying-out-text-with-coretext-547">Laying out text with Core Text</a>. It&rsquo;s a text view that squeezes the glyphs towards your finger when you touch it. I built it to demonstrate per-glyph layout in Core Text. While demonstrating it, I was pretty unsatisfied with how it looked when you touched it or let go. When you drag your finger on the view, the glyphs move around like water. It&rsquo;s quite pretty. But when you initially touch the screen, the glyphs suddenly jump to their new locations, and then they jump back when you release the screen. Well, that&rsquo;s no good. So I wanted to add animations.</p>

<p>But here&rsquo;s the thing: what do you animate? While you do want to animate the glyph positions, you&rsquo;re not doing it directly. The location of each glyph is dependent on the location of the current touch. What you want to animate is how much the touch impacts the glyph positions. A quick look over CALayer&rsquo;s list of animatable properties confirmed that there&rsquo;s nothing like that. But no problem, I added a custom property called <code>touchPointScale</code> and animated that. (I cover animating custom properties in the Layers chapter of <a href="http://iosptl.com">iOS:PTL</a>, and I still have to pull out that chapter every time to remind myself how to do it. Ole Begemann has a <a href="http://stackoverflow.com/questions/2395382/animating-a-custom-property-of-calayer-subclass">good, quick writeup</a> on Stack Overflow.)</p>

<!-- more -->


<p>OK, so great. But one comment I got at CocoaConf was that it should handle multitouch. So I started playing with that, but now I had a problem. I could have lots of touches, so my single <code>touchPointScale</code> doesn&rsquo;t&hellip;er&hellip;scale. What I want to do is take a collection of <code>TouchPoint</code> objects that the layer owns, animate each of their scales independently, and have the layer do its animation thing. But how do we animate based on changes in properties of things in a layer&rsquo;s collection?</p>

<p><em>The sample code is available on <a href="https://github.com/rnapier/richtext-coretext/tree/master/PinchText">github</a>.</em></p>

<p>First, we have <code>TouchPoint</code> objects. These are just trivial data objects. The <code>identifier</code> here happens to be the address of the object, but it could be any unique string.</p>

<p>``` objc
@interface TouchPoint : NSObject
@property (nonatomic, readwrite, strong) UITouch *touch;
@property (nonatomic, readwrite, assign) CGPoint point;
@property (nonatomic, readwrite, assign) CGFloat scale;</p>

<ul>
<li>(TouchPoint <em>)touchPointForTouch:(UITouch </em>)touch inView:(UIView *)view scale:(CGFloat)scale;</li>
<li>(NSString *)identifier;
@end
```</li>
</ul>


<p>Then we have <code>PinchTextLayer</code>, which has a collection of <code>TouchPoint</code> objects:</p>

<p><code>objc
@property (nonatomic, readwrite, strong) NSMutableDictionary *touchPointsForIdentifier;
</code></p>

<p>The thing we want to animate is &ldquo;the <code>scale</code> of the touch point with a given identifier.&rdquo; In order to animate something, it needs to be something you can call <code>setValue:forKeyPath:</code> on. And that brings us to the power of KVC and dictionaries.</p>

<p>Say you have this code:</p>

<p><code>objc
self.dict[@"somekey"] = @"somevalue";
</code></p>

<p>You can also write that this way:</p>

<p><code>objc
[self setValue:@"somevalue" forKeyPath:@"dict.somekey"];
</code></p>

<p>And if you have this code:</p>

<p><code>objc
self.dict[@"somekey"].prop = @"someValue";
</code></p>

<p>You can write that this way:</p>

<p><code>objc
[self setValue:@"somevalue" forKeyPath:@"dict.somekey.prop"];
</code></p>

<p>And that means that things held in dictionaries can be animated pretty easily because they can be accessed via <code>setValue:forKeyPath:</code>. First, you need to tell the layer that changes on your dictionary impact drawing:</p>

<p>``` objc
+ (BOOL)needsDisplayForKey:(NSString *)key {
  if ([key isEqualToString:@&ldquo;touchPointForIdentifier&rdquo;]) {</p>

<pre><code>return YES;
</code></pre>

<p>  }
  else {</p>

<pre><code>return [super needsDisplayForKey:key];
</code></pre>

<p>  }
}
```</p>

<p>This applies to all key paths that start with <code>touchPointForIdentifier</code>. And because we&rsquo;re not animating <code>touchPointForIdentifier</code> itself, we don&rsquo;t have to make it <code>@dynamic</code>. We do need to copy it in <code>initWithLayer:</code> of course:</p>

<p><code>objc
- (id)initWithLayer:(id)layer {
  self = [super initWithLayer:layer];
  ...
  [self setTouchPointForIdentifier:[[layer touchPointForIdentifier] copy]];
  return self;
}
</code></p>

<p>And that&rsquo;s just about it. We can now treat the key path &ldquo;touchPointForIdentifier.&lt;identifier&gt;.scale&rdquo; as an animatable property just like <code>position</code> or <code>opacity</code>.</p>

<p>``` objc
&ndash; (void)addTouches:(NSSet <em>)touches inView:(UIView </em>)view scale:(CGFloat)scale {
  for (UITouch *touch in touches) {</p>

<pre><code>TouchPoint *touchPoint = [TouchPoint touchPointForTouch:touch inView:view scale:scale];
NSString *keyPath = [self touchPointScaleKeyPathForTouchPoint:touchPoint];

CABasicAnimation *anim = [CABasicAnimation animationWithKeyPath:keyPath];
anim.fromValue = @0;
anim.toValue = @(touchPoint.scale);
[self addAnimation:anim forKey:keyPath];

[self.touchPointForIdentifier setObject:touchPoint forKey:touchPoint.identifier];
</code></pre>

<p>  }
}</p>

<ul>
<li>(NSString <em>)touchPointScaleKeyPathForTouchPoint:(TouchPoint </em>)touchPoint {
return [NSString stringWithFormat:@&ldquo;touchPointForIdentifier.%@.scale&rdquo;, touchPoint.identifier];
}
```</li>
</ul>


<p>Side note: Along the way, I also developed a technique for animating custom properties (without any storage behind them, implemented by custom methods) by overriding <code>setValue:forKeyPath:</code>. If you think that might be useful, you can see it in <a href="https://github.com/rnapier/richtext-coretext/tree/4eb482dcfe2340f09d553c707a5b3b2a4116ff63">github</a>, but so far I haven&rsquo;t thought of any cases where it&rsquo;s better than using the dictionary.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RNCryptor and My Titanium Experiment]]></title>
    <link href="http://robnapier.net/rncryptor-titanium/"/>
    <updated>2012-08-21T10:13:18-04:00</updated>
    <id>http://robnapier.net/rncryptor-titanium</id>
    <content type="html"><![CDATA[<p>Several months ago, I received a request to port my <a href="https://github.com/rnapier/RNCryptor">RNCryptor</a> module to <a href="http://www.appcelerator.com">Titanium</a>. I&rsquo;ve never been a fan of the JavaScript wrappers for iOS and Android. My belief and experience is that they&rsquo;re far more trouble than their worth. But the goal of RNCryptor was always to help people use AES correctly, and that&rsquo;s as important in JavaScript as it is in Objective-C. So I wrapped up RNCyptor into a Titanium module and stuck it on the <a href="https://marketplace.appcelerator.com">Appcelerator Marketplace</a>. Though RNCryptor is free, the pain of wrapping it into JavaScript led me to charge $10 for the Titanium version.</p>

<p>The pain of maintaining this thing has gotten to be too much, though. I&rsquo;m releasing it today on <a href="https://github.com/rnapier/Cryptor-titanium">GitHub</a> in its current form, which is based on the older, synchronous form of RNCryptor. I may not have updated all the license text yet; if I miss any, it is under the MIT license. Thanks to those who purchased Cryptor-Titanium during its commercial life. Anyone who is interested in continuing development, please contact me (or submit a pull request).</p>

<!-- more -->


<p>Note that RNCryptor has always been an iOS-only solution, so the Titanium wrapper only works on iOS. If you want a correctly-written, cross-platform JavaScript solution, my recommendation is <a href="http://bitwiseshiftleft.github.com/sjcl">SJCL</a>.</p>

<p>My experience here has strengthened my belief that the JavaScript shims for mobile development are bad in theory and horrible in practice. It is much easier to write a full iOS app and a full Android app than to try to write one app that runs well on both. JavaScript only makes it harder.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phone-screening Cocoa Developers]]></title>
    <link href="http://robnapier.net/phone-screen/"/>
    <updated>2012-06-26T11:15:12-04:00</updated>
    <id>http://robnapier.net/phone-screen</id>
    <content type="html"><![CDATA[<p>There was an <a href="http://stackoverflow.com/questions/1019636/phone-screen-questions-for-mac-os-x-developer-positions/1019759#1019759">interesting question</a> on StackOverflow that was unfortunately closed as off topic. It was off topic, but it&rsquo;s still a useful question. When phone screening potential Cocoa developers, what kinds of questions should you ask? I&rsquo;ve helped several clients screen potential candidates over the years, and so I have several questions I use to help with that.</p>

<!-- more -->


<p>Now obviously some might be concerned that posting such a list invites people to &ldquo;study for the test.&rdquo; To that, I have several comments:</p>

<ul>
<li>I am not providing answers here, only questions. A potential interviewee who researches the answers is a benefit to everyone.</li>
<li>This are the minimum basics. They&rsquo;re intended to figure out if someone is even worth talking to. Failure to know these things are a pretty good indication that you <em>aren&rsquo;t</em> interested in this candidate. They&rsquo;re not a demonstration of significant skill.</li>
<li>There&rsquo;s almost always a big difference in the answers between someone who has actually encountered these issues in the real world, and someone who has just recently searched google to crib the answers. It&rsquo;s not usually difficult to tell them apart.</li>
<li>Anyone who found this list by reading my blog is obviously a developer of exceptional taste and intelligence and should be invited to an in-person interview on the spot.</li>
</ul>


<p>The first list of questions is for &ldquo;any&rdquo; developer, by which I mean any professional, experienced developer. The second list refers to &ldquo;senior&rdquo; developers. Most of the questions on that list would be more properly categorized as &ldquo;intermediate,&rdquo; but senior developers often specialize. One might be an incredible UI programmer who knows little about ObjC internals. Another might be brilliant at developing high-performance data processing with Dispatch I/O, but have trouble managing view rotations. My questions tend to skew a little towards the latter type of developer since that&rsquo;s my speciality. But I try to cover the UI side as well.</p>

<p>Note that several of my questions involve opinions or ask the candidate to &ldquo;describe generally.&rdquo; None of my questions expect exact, runnable code to be generated on the spot, nor do I expect a candidate to be a walking encyclopedia of Cocoa implementation details. My goal is to explore what the candidate knows intuitively and would know where to look quickly if needed. My goal is not to give a Cocoa pop-quiz. Particularly in a phone screen, most of these questions should be fairly easy to answer for an interesting candidate.</p>

<p>Input welcome as I evolve this list. In particular, I&rsquo;m looking for senior developers who might feel my questions are too skewed to my skill set. I&rsquo;d like to keep them as broadly applicable as possible.</p>

<p>So without further ado, some questions.<!--more--><h3>Any Cocoa Developer</h3></p>

<ul>
<li><p>Should be able to explain the difference between <code>foo = bar</code> and <code>self.foo = bar</code> when <code>foo</code> is an ivar.</p></li>
<li><p>Should be able to easily explain what would cause <code>EXC_BAD_ACCESS</code>.</p></li>
<li><p>Should know what happens if you send a message to <code>nil</code>.</p></li>
<li><p>Should be able to explain the MVC paradigm, and describe how to break down a simple problem into Models, Views and Controllers. Pay special attention to how they develop Model classes.</p></li>
<li><p>(iOS) Should be able to explain the use of <code>UITableView</code>.</p></li>
<li><p>(iOS) Should be able to explain at least one way to fade-out a view that does not involve an <code>NSTimer</code>.</p></li>
<li><p>Should know the difference between a view and a layer, and how the two relate to each other.</p></li>
<li><p>Should be able to explain a retain loop and how to prevent them.</p></li>
<li><p>Should be able to explain a retain loop caused by a block capturing <code>self</code>. They should be able to describe at least one way to address this problem.</p></li>
<li><p>Should be able to explain what a nib file is, how it is loaded, and (iOS) the order of <code>UIViewController</code> methods during creating, loading, displaying, and unloading the main view with and without a nib file (minor mistakes here are ok; but they should be familiar with the overall flow).</p></li>
<li><p>Should be able to describe the debugging steps for the following scenario: &ldquo;You have a button, an <code>IBAction</code>, a text field, and an <code>IBOutlet</code>. When you press the button, it should increment the value in the text field. However, when you press the button, the button highlights and unhighlights, but nothing else happens.&rdquo;</p></li>
<li><p>(iOS) Should know how to show and dismiss the keyboard.</p></li>
<li><p><em>(May become an intermediate/senior topic in the future.)</em> Should know the rules of memory management cold, including the <a href="http://robnapier.net/blog/three-magic-words-6">three magic words</a>. With the rise of ARC, this may eventually become a senior question, but in 2012 every serious Cocoa developer should still be familiar with manual memory management.</p></li>
<li><p>(OSX) Should be able to describe the responder-chain, what it is for, and generally how it works.</p></li>
<li><p>Should be able to describe the difference between the Delegate pattern and the Target-Action pattern and where you would best apply each.</p></li>
</ul>


<h3>Anyone Claiming to be a "Senior" Cocoa Developer</h3>


<ul>
<li><p>Should have several defensible opinions on what constitutes Cocoa &ldquo;best practice.&rdquo;</p></li>
<li><p>Should be able to provide information about a radar they&rsquo;ve filed. Any senior developer should eventually have encountered a Cocoa bug, and a good one will have filed a radar. Extra credit for radars cross-posted to openradar.</p></li>
<li><p>Should have specific opinions and complaints about Xcode. Anyone without specific complaints about Xcode hasn&rsquo;t used it very much. Extra credit for radars opened against Xcode.</p></li>
<li><p>Should know the Core Foundation memory management rules and should be able to explain what &ldquo;toll-free bridging&rdquo; is.</p></li>
<li><p>Should know how to correctly use <code>__bridge</code>, <code>CFBridgingRetain()</code>, and <code>CFBridgingRelease()</code>.</p></li>
<li><p>(iOS) Should be able to explain several circumstances in which an application may run in the background. In particular, they should be able to explain how to manage long-running operations and when this should be used.</p></li>
<li><p>(iOS) Should be able to explain the use of <code>UIGestureRecognizer</code> and give several reasons that a recognizer might not fire when expected.</p></li>
<li><p>Should be able to name several Frameworks outside of Cocoa. Specifically, they should be familiar with at least one Framework that does not link by default and they need to add to their project (any serious developer will have encountered this problem).</p></li>
<li><p>Should know how to apply perspective to <code>CALayer</code>. Extra credit if they can explain the difference between a normal layer and a transform layer.</p></li>
<li><p>Should be able to explain an <code>NSInvocation</code>, at least to the level of how you would use one.</p></li>
<li><p>Should be able to explain generally KVO&rsquo;s implementation. In particular, &ldquo;when you call a setter on a KVO observed object, <code>willChangeValueForKey:</code> is called automatically, even though it&rsquo;s not in the setter code. How is this achieved?&rdquo;</p></li>
<li><p>Should be able to design a thread-safe accessor using GCD. Extra credit if it allows simultaneous readers and does not block writers. (Explanation of the basic approach is fine. I dislike on-the-spot coding, even when the developer is onsite.)</p></li>
<li><p>Should be able to explain run loops, why you might manually process one (i.e. <code>runMode:beforeDate:</code>), reasons you might manually process the <em>main</em> run loop and what dangers that might create.</p></li>
<li><p>Should be familiar with several approaches to debugging memory crashes and leaks, including <code>NSZombiesEnabled</code> and malloc debugging. Should be able to describe generally how each of these works.</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
