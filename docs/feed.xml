<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="https://robnapier.net/feed.xml" rel="self" type="application/atom+xml" /><link href="https://robnapier.net/" rel="alternate" type="text/html" /><updated>2019-04-25T19:16:16-04:00</updated><id>https://robnapier.net/feed.xml</id><title type="html">Cocoaphony</title><subtitle>Mac and iOS development with a focus on Swift and functional programming</subtitle><author><name>Rob Napier</name></author><entry><title type="html">Protocols I: “Start with a protocol,” he said</title><link href="https://robnapier.net/start-with-a-protocol" rel="alternate" type="text/html" title="Protocols I: &quot;Start with a protocol,&quot; he said" /><published>2019-04-22T00:00:00-04:00</published><updated>2019-04-22T00:00:00-04:00</updated><id>https://robnapier.net/start-with-a-protocol</id><content type="html" xml:base="https://robnapier.net/start-with-a-protocol">&lt;h2 id=&quot;in-the-beginning-crusty&quot;&gt;In the beginning, Crusty&lt;/h2&gt;

&lt;p&gt;In 2015, at WWDC, &lt;a href=&quot;https://twitter.com/DaveAbrahams&quot;&gt;Dave Abrahams&lt;/a&gt; gave what I believe is still the greatest Swift talk ever given, and certainly the most influential. &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2015/408/&quot;&gt;”Protocol-Oriented Programming in Swift,”&lt;/a&gt; or as it is more affectionately known, “The Crusty Talk.”&lt;/p&gt;

&lt;p&gt;This is the talk that introduced the phrase “protocol oriented programming.” The first time I watched it, I took away just one key phrase:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Start with a protocol.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And so, dutifully, I started with a protocol. I made a UserProtocol and a DocumentProtocol and a ShapeProtocol and on and on, and then started implementing all those protocols with generic subclasses and eventually I found myself in a corner.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Protocol 'P' can only be used as a generic constraint because it has Self or associated type requirements
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And then I started throwing things.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;For a couple of years, I was rather annoyed at the phrase “protocol-oriented programming.” If by “protocol” you just mean “interface,” then Go is much more “protocol oriented” than Swift. But the more I’ve wrestled with this new paradigm, the more I realized that protocols are more than just interfaces, and POP isn’t deeply about the protocols anyway. It’s about the extensions. But “extension-oriented programming” would be an even worse name. And more than extensions, it’s really, deeply, about generic algorithms. And “algorithm-oriented programming,” well, aren’t we all?&lt;/p&gt;

&lt;p&gt;Naming a paradigm is always fraught with trouble. Most modern “object-oriented” languages aren’t object-oriented at all. They’re class-oriented (vs Smalltalk and JavaScript). And most “functional programming” languages are mostly value-oriented (vs FP and point-free). But the point of the names is shorthand for concepts bigger than a word, so let’s not get too caught up on the “protocol” in protocol-oriented programming. The Holy Roman Empire was in no way holy, nor Roman, nor an empire. Discuss.&lt;/p&gt;

&lt;h2 id=&quot;beware-quotes-traveling-sans-context&quot;&gt;Beware quotes traveling sans context&lt;/h2&gt;

&lt;p&gt;The famous “start with a protocol” quote is actually the end of a longer paragraph:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For example, if you want to write a generalized sort or binary search…Don’t start with a class. Start with a protocol.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Or as Dave &lt;a href=&quot;https://twitter.com/cocoaphony/status/1104114233288151043&quot;&gt;clarified on Twitter&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Use value types, then if you need polymorphism, make them conform to protocols.  Avoid classes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;If&lt;/em&gt; you’re reaching for class inheritance, try a protocol and value type instead. That’s very different from “start with a protocol for every problem.” &lt;a href=&quot;https://twitter.com/AirspeedSwift&quot;&gt;Ben Cohen&lt;/a&gt; covered this in much more detail in the WWDC 2018 talk &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2018/406/&quot;&gt;Swift Generics (Expanded)&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;So notice that we considered a varied number of concrete types first. And now, we’re thinking about a kind of protocol that could join them all together. And, it’s important to think of things as this way around. To start with some concrete types, and then try and unify them with a protocol.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span class=&quot;pullquote-right&quot; data-pullquote=&quot;Write concrete code first. Then work out the generics.&quot;&gt;
If you take away just one thing from this series, I want it to be this: &lt;em&gt;Write concrete code first. Then work out the generics.&lt;/em&gt; Start with concrete types and clear use cases, and find the places that duplication happens. Then find abstractions. The power of protocol-oriented programming is that you don’t have to decide when you create a type exactly how it will be used. When you use class inheritance, you have to design your class hierarchy very early. But with protocols, you can wait until later.
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;When I most get into trouble with protocols is when I try to write code “as generically as possible.” That doesn’t really mean anything. Abstractions are choices, and when you make a choice to be flexible in one direction, you generally make it harder to be flexible in other directions. Without some clear use cases, you don’t know what abstractions make sense.&lt;/p&gt;

&lt;p&gt;So today, I want to come to protocol-oriented programming fresh, with a focus on very every-day problems we face when developing iOS apps in Swift.&lt;/p&gt;

&lt;h2 id=&quot;setting-the-stage&quot;&gt;Setting the stage&lt;/h2&gt;

&lt;p&gt;Over the next several articles I’ll be developing a very common system, a general-purpose networking stack that can fetch data asynchronously and decode arbitrary types. You may have built a system like this yourself in Swift. You may have used a framework that does it. The point of this exercise isn’t really the end result (though I think it’s quite useful code), but the process. What questions should you ask, and when, and how do you know what good answers look like? And most importantly, how does this “protocol-oriented” thing guide us? How is it different than other approaches?&lt;/p&gt;

&lt;p&gt;I expect that you’re somewhat familiar with Swift, and particularly that you understand the syntax of generic functions and types, and have at least seen an &lt;code class=&quot;highlighter-rouge&quot;&gt;associatedtype&lt;/code&gt; before. If you’re just getting started in Swift, maybe bookmark this series for later.&lt;/p&gt;

&lt;p&gt;So to get started, I want to show a common starting point that never goes well for me. I’ve made this mistake many times, and I always find myself in a corner eventually. I see a lot of other people make this mistake, too.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// A network Request knows the URLRequest to fetch some data, and then can parse it.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// This will not go well.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;associatedtype&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Response&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Response&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;urlRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URLRequest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;pullquote-right&quot; data-pullquote=&quot;will I ever want to put this in an Array?&quot;&gt;
How do I know this won’t go well? I’ll discuss it much more in depth later, but Request is a protocol with associated type (PAT). Any time you create a PAT, you should ask yourself “will I ever want to put this in an Array?” If the answer is yes, you don’t want a PAT. Requests are certainly something you’d want to put in an Array. Lists of pending requests, lists of requests that need to be retried, request priority queues. There are lots of reasons to put a Request in an Array.
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;You might be tempted to look for a work-around, but don’t. Type-eraser? No. Generalized Existential?!?! …no… Even if you find some “work-around” to the problem at hand you’ll run into other walls very quickly (and I’ve seen that again and again). That “can only be used as a generic constraint” is telling you something important. This isn’t a problem with Swift. This just isn’t what PATs are for. There are other tools for this problem. In later articles I’ll explain why you don’t want these work-arounds, but the basic problem is starting with a protocol before we even know what algorithm we want to write.&lt;/p&gt;

&lt;p&gt;So what does “know the algorithm” look like in practice?&lt;/p&gt;

&lt;h2 id=&quot;start-concrete&quot;&gt;Start concrete&lt;/h2&gt;

&lt;p&gt;A good way to find a generic algorithm is to start with several concrete algorithms, and then make a parameter out of what varies. In this case, I want to fetch several model types from an API and decode them. In order to start concretely, I’ll make some actual types.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Hashable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Hashable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This may not be our final implementations, but they’re good enough to get started. They’re pretty similar, but not identical, and that’s good for the first concrete types. I’ll want to push the envelope a bit more later, but this is good enough for now.&lt;/p&gt;

&lt;p&gt;I also want a client to manage my connection to the server. I’m marking classes “final” to remind you that there’s no class inheritance here. I’m not suggesting you need to include “final” on all your class definitions. It’s not usually necessary. I’m making it a reference type because the client might eventually have some shared state. For example, if a login step were required, I’d want all references to the client to be logged in together.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;APIClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;baseURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://www.example.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URLSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ... methods to come ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And now I want the code to fetch and decode a User, as a method on APIClient.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;urlRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URLRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseURL&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;appendingPathComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;appendingPathComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dataTask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JSONDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’m sure many of you have written code kind of like this many times. Construct an URLRequest. Fetch it. Parse it. Pass it to the completion handler. Now, what does the code for &lt;code class=&quot;highlighter-rouge&quot;&gt;fetchDocument&lt;/code&gt; look like?&lt;/p&gt;

&lt;style&gt;
    .chl { color: yellow; } /* code highlight */
    .cer { color: red; } /* code error */
&lt;/style&gt;

&lt;pre&gt;
func fetch&lt;span class=&quot;chl&quot;&gt;Document&lt;/span&gt;(id: Int,
               completion: @escaping (Result&amp;lt;&lt;span class=&quot;chl&quot;&gt;Document&lt;/span&gt;, Error&amp;gt;) -&amp;gt; Void)
{
    let urlRequest = URLRequest(url: baseURL
        .appendingPathComponent(&lt;span class=&quot;chl&quot;&gt;&quot;document&quot;&lt;/span&gt;)
        .appendingPathComponent(&quot;\(id)&quot;)
    )

    session.dataTask(with: urlRequest) { (data, _, error) in
        if let error = error { completion(.failure(error)) }
        else if let data = data {
            completion(Result {
                try JSONDecoder().decode(&lt;span class=&quot;chl&quot;&gt;Document&lt;/span&gt;.self, from: data)
            })
        }
        }.resume()
}
&lt;/pre&gt;

&lt;p&gt;Unsurprisingly, &lt;code class=&quot;highlighter-rouge&quot;&gt;fetchDocument&lt;/code&gt; is almost identical except for four changes: the function name, the type to pass to the closure, the URL path, and the type to decode. It’s so similar because I copied and pasted it. And when you find yourself copying and pasting, that’s where I know there’s probably some reusable code. So I extract that into a generic function:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decodable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                             &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;where-should-type-parameters-go&quot;&gt;Where should type parameters go?&lt;/h2&gt;

&lt;p&gt;Before going on, it’s worth exploring the signature. Notice that I pass the type of Model as a parameter. It doesn’t even need a name, because the value won’t be used. It’s just there to nail down the type parameter in the function’s parameters rather than in completion handler’s parameters. Doing it that way makes type inference a lot nicer. Consider JSONDecoder’s &lt;code class=&quot;highlighter-rouge&quot;&gt;decode&lt;/code&gt; method. It’s called this way:&lt;/p&gt;

&lt;pre&gt;
let value = try JSONDecoder().decode(&lt;span class=&quot;chl&quot;&gt;Int.self&lt;/span&gt;, from: data)
&lt;/pre&gt;

&lt;p&gt;It could have been designed this way instead:&lt;/p&gt;

&lt;pre&gt;
let value&lt;span class=&quot;chl&quot;&gt;: Int&lt;/span&gt; = try JSONDecoder().decode(data)
&lt;/pre&gt;

&lt;p&gt;It would have even been a little shorter that way. But it doesn’t scale as well. It creates a lot of headaches when things get more complicated, and it makes the compiler errors much harder to understand. So make sure that every type parameter shows up in a function parameter, rather than just the type of the return value or something in a closure.&lt;/p&gt;

&lt;p&gt;Implementing &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; is pretty straightforward, except for one small &lt;span class=&quot;cer&quot;&gt;problem&lt;/span&gt;:&lt;/p&gt;

&lt;pre&gt;
func &lt;span class=&quot;chl&quot;&gt;fetch&amp;lt;Model&amp;gt;(_ model: Model.Type,&lt;/span&gt;
                  id: Int,
                  completion: @escaping (Result&amp;lt;&lt;span class=&quot;chl&quot;&gt;Model&lt;/span&gt;, Error&amp;gt;) -&amp;gt; Void)
{
    let urlRequest = URLRequest(url: baseURL
        .appendingPathComponent(&lt;span class=&quot;cer&quot;&gt;&quot;??? user | document ???&quot;&lt;/span&gt;)
        .appendingPathComponent(&quot;\(id)&quot;)
    )

    session.dataTask(with: urlRequest) { (data, _, error) in
        if let error = error { completion(.failure(error)) }
        else if let data = data {
            completion(Result {
                try JSONDecoder().decode(&lt;span class=&quot;chl&quot;&gt;Model&lt;/span&gt;.self, from: data)
            })
        }
        }.resume()
}
&lt;/pre&gt;

&lt;p&gt;There’s this string that’s either “user” or “document”. That’s something that this algorithm requires, but isn’t part of Decodable. So Decodable isn’t powerful enough to implement this. I need a new protocol.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fetchable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decodable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;apiBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I need a protocol that requires that the type be Decodable, and also requires that it provide this extra string, &lt;code class=&quot;highlighter-rouge&quot;&gt;apiBase&lt;/code&gt;. &lt;!-- (See [Protocols do not conform]() for more on the difference between &quot;*requires* Decodable&quot; and &quot;*is* Decodable.&quot;) --&gt; With that, I can finish writing &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;
func fetch&amp;lt;Model&amp;gt;(_ model: Model.Type,
                  id: Int,
                  completion: @escaping (Result&amp;lt;Model, Error&amp;gt;) -&amp;gt; Void)
{
    let urlRequest = URLRequest(url: baseURL
        .appendingPathComponent(&lt;span class=&quot;chl&quot;&gt;Model.apiPath&lt;/span&gt;)
        .appendingPathComponent(&quot;\(id)&quot;)
    )

    session.dataTask(with: urlRequest) { (data, _, error) in
        if let error = error { completion(.failure(error)) }
        else if let data = data {
            completion(Result {
                try JSONDecoder().decode(Model.self, from: data)
            })
        }
        }.resume()
}
&lt;/pre&gt;

&lt;h2 id=&quot;retroactive-modeling&quot;&gt;Retroactive modeling&lt;/h2&gt;

&lt;p&gt;Now to use it, I need to make User and Document conform to Fetchable.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fetchable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;apiBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fetchable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;apiBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;document&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These tiny extensions represent one of the most powerful, and easiest to overlook, aspects of protocol-oriented programming: retroactive modeling. It is quite non-obvious that I can take a type like User that wasn’t designed to be Fetchable, and make it Fetchable in an extension. And that extension doesn’t even have to be in the same module. That’s not something you can typically do with class inheritance. You need to choose a superclass when you define a type.&lt;/p&gt;

&lt;p&gt;I can take any type I want and conform it to my own protocols to use it in new and more powerful ways that the original type creator may never have thought of. There’s no need to tie User to this one use case and this one API. That’s why this protocol is called Fetchable rather than something like Model. It &lt;em&gt;isn’t&lt;/em&gt; a “model.” It’s “something that can be fetched” and it only provides the methods and properties that allow that. I’m not suggesting that you should create a protocol for every use case, just the opposite. Really good protocols are usable by many algorithms. But you want most uses of the protocol to need most of the requirements. If the protocol is just a copy of the type’s entire API, it’s not doing its job. I’ll talk about that more in later articles.&lt;/p&gt;

&lt;h2 id=&quot;first-checkpoint&quot;&gt;First checkpoint&lt;/h2&gt;

&lt;p&gt;I know this has been basic so far. I know many of you “know all this.” This article is a warm-up, and the point of the exercise is not &lt;em&gt;what&lt;/em&gt; was built, but &lt;em&gt;how&lt;/em&gt; it was built. I started with simple, concrete code, and extracted first a generic function, and then a simple (no associated type) protocol. This is exactly the opposite of starting with a Request PAT and then trying to figure out the callers. This was just the first step. This system is nowhere near as flexible and powerful as it could be, but already it’s meeting the goal I set at the beginning: “fetch a several model types from an API and decode them.” Keep the current goal in mind and don’t let the protocols get out in front of you.&lt;/p&gt;

&lt;p&gt;Next time, I’ll push this example further, and start seeing what protocol oriented programming can really accomplish. Eventually I’ll even need a PAT!&lt;/p&gt;</content><author><name>Rob Napier</name></author><summary type="html">In the beginning, Crusty In 2015, at WWDC, Dave Abrahams gave what I believe is still the greatest Swift talk ever given, and certainly the most influential. ”Protocol-Oriented Programming in Swift,” or as it is more affectionately known, “The Crusty Talk.” This is the talk that introduced the phrase “protocol oriented programming.” The first time I watched it, I took away just one key phrase: Start with a protocol. And so, dutifully, I started with a protocol. I made a UserProtocol and a DocumentProtocol and a ShapeProtocol and on and on, and then started implementing all those protocols with generic subclasses and eventually I found myself in a corner. Protocol 'P' can only be used as a generic constraint because it has Self or associated type requirements And then I started throwing things.</summary></entry><entry><title type="html">A Conditional Breakpoint</title><link href="https://robnapier.net/conditional-breakpoint" rel="alternate" type="text/html" title="A Conditional Breakpoint" /><published>2017-04-23T11:59:20-04:00</published><updated>2017-04-23T11:59:20-04:00</updated><id>https://robnapier.net/conditional-breakpoint</id><content type="html" xml:base="https://robnapier.net/conditional-breakpoint">&lt;p&gt;&lt;a href=&quot;https://twitter.com/jamesdempsey/status/855979622655291392&quot;&gt;I’m now a Conditional Breakpoint.&lt;/a&gt; It’s been a dream of mine for long time, and it finally happened at &lt;a href=&quot;http://cocoaconf.com/chicago-2017/sessions/breakpoint-jam&quot;&gt;CocoaConf Chicago&lt;/a&gt;. There are folks who have played extensively with &lt;a href=&quot;http://jamesdempsey.net/2013/03/02/introducing-the-breakpoint-jam-at-cocoaconf-chicago/&quot;&gt;James Dempsey&lt;/a&gt;, and those are the Breakpoints. If you’ve only played occasionally (even once), you’re a Conditional Breakpoint.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Originally, I wasn’t comfortable being a full “Conditional.” I’m not much of a guitarist. I can play along reasonably if there’s someone to cover my mistakes, and a group probably sounds slightly better with me than without. But listening to me play alone is an act of love and friendship, not something you’d do on purpose. So I kind of wanted to be called a “Provisional Breakpoint” instead. But that was wrong. Someone who’s played at a Breakpoint Jam is a Conditional Breakpoint. That’s what it means. If you’ve done it, you’ve earned it.&lt;/p&gt;

&lt;p&gt;Everyone who played guitar that night was a Conditional, but &lt;a href=&quot;https://twitter.com/designatednerd&quot;&gt;Ellen Shapiro&lt;/a&gt; was clearly our leader. She plays with an energy and style that I want to emulate. She’s much better than I am, but what I’ve played in years, she’s played in decades, so maybe that’s natural. &lt;a href=&quot;/copying&quot;&gt;Choosing the right people to copy is a worthwhile skill in itself.&lt;/a&gt; There’s nothing wrong with being a beginner. There’s nothing wrong with learning and flailing and trying again. There’s nothing wrong with letting someone mentor you. And there are a lot of ways to mentor. You might not even know when you’re doing it.&lt;/p&gt;

&lt;p&gt;When I first asked to play with the Breakpoints a few weeks ago, James said yes, and I immediately panicked a little on the inside, and I asked for the whole setlist so I could practice. And he said sure and sent them. But then he said, you know, it’s fine to just play some of the songs, or even drop out of parts if you’re not up for it. It’s better to have a few songs you’re good at than a bunch you stumble through. And I said yeah, yeah, yeah, I know that. I’m cool. And I did kind of know. But not really. I’d been planning to practice them all and just beat myself up a lot everywhere I stumbled. I needed someone who knows more than me to give me permission to be a beginner, but still let me play. Sometimes you’ll never know the impact of a small kindness.&lt;/p&gt;

&lt;p&gt;After the show, &lt;a href=&quot;https://twitter.com/ejknapp&quot;&gt;Eric Knapp&lt;/a&gt; asked me a very useful question. “So, that was your dream, and now you’ve done it. What’s your next dream?” It’s easy to lose your direction when you get to a destination. If you want to keep growing, your goals have to grow with you. My next goal is to be good enough that I can play alone and you’d rather stay than leave, even if you’re not my friend. It’s what I call “a mediocre guitarist.” Eric thought it was a good goal, but suggested a more concrete one: Play one song at an open mic night. And he passed on some wisdom he’d received and I needed. “Don’t wait until you’re ready. Go play before you’re ready. There are lessons you can only learn by doing.” Eric has forgotten more about playing than I know (and I don’t believe I’m exaggerating). It’s good advice.&lt;/p&gt;

&lt;p&gt;I talk a bit about learning guitar and make a bit of noise about being a beginner. Some of that is because I love to tell stories, and I hope my stories can help other people. But of course saying “I’m a beginner” lowers expectations and overdone is a cheap way of getting praise. It’s a dangerous thing to make too big a deal about. For all my “I’m a beginner and I’m scared,” &lt;a href=&quot;https://twitter.com/savinola&quot;&gt;Laura Savino&lt;/a&gt; has been playing guitar for less time than I have, and this &lt;em&gt;wasn’t&lt;/em&gt; her first Breakpoint Jam. So sometimes the brave ones don’t make as much noise. You have to look or you’ll never notice.&lt;/p&gt;

&lt;p&gt;I may just have been lucky so far, but I’ve found the guitar community to be incredibly welcoming. James isn’t alone in inviting beginners to play, but the Breakpoints has a special history of it. Except for Ellen, the rest of us (Laura, myself, and &lt;a href=&quot;https://twitter.com/kognate&quot;&gt;Josh Smith&lt;/a&gt;) all made our first public performances at Breakpoint Jams. Creating that kind of opportunity is a gift and how you create and sustain a community. If we all “only hire the best,” where do you think the next generation will grow? Thankfully, James is willing to play with folks who are just trying their best. Are we as willing to develop software the same way?&lt;/p&gt;

&lt;p&gt;There are senior developers and there are junior developers, and there are developers in between. Different people have different experience and skill. You might be a senior developer in one language or platform or style, and just learning another. But there’s no point talking about “real” developers. If you write software and it runs, you’re a real developer. That’s what it means. You develop software. If you’ve done it, you’ve earned it.&lt;/p&gt;

&lt;p&gt;And if you develop software in Cocoa, then you really want to listen to &lt;a href=&quot;https://itunes.apple.com/us/album/backtrace/id926558924&quot;&gt;Backtrace&lt;/a&gt;. Hope to see you at the &lt;a href=&quot;http://jamesdempsey.net/splash/jdbp2017&quot;&gt;next show&lt;/a&gt; to benefit &lt;a href=&quot;http://appcamp4girls.com&quot;&gt;App Camp For Girls&lt;/a&gt;!&lt;/p&gt;</content><author><name>Rob Napier</name></author><summary type="html">I’m now a Conditional Breakpoint. It’s been a dream of mine for long time, and it finally happened at CocoaConf Chicago. There are folks who have played extensively with James Dempsey, and those are the Breakpoints. If you’ve only played occasionally (even once), you’re a Conditional Breakpoint.</summary></entry><entry><title type="html">Refactoring Slow and Steady</title><link href="https://robnapier.net/refactoring" rel="alternate" type="text/html" title="Refactoring Slow and Steady" /><published>2017-02-13T12:21:55-05:00</published><updated>2017-02-13T12:21:55-05:00</updated><id>https://robnapier.net/refactoring</id><content type="html" xml:base="https://robnapier.net/refactoring">&lt;p&gt;I’ve been talking with folks on a Slack about refactoring today, and I thought I’d put some of my thoughts here. Maybe a little less polished than I’d like, but I wanted to get them out of my head and down on “paper.”&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;em&gt;The conversation started by referencing the classic Joel piece, &lt;a href=&quot;https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/&quot;&gt;Things You should Never Do, Part I&lt;/a&gt;. Leading to my thoughts:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Just finished some major refactoring work, moving ObjC to Swift and completely redesigning its state machine. I absolutely stand behind the pieces I rewrote (which were a constant source of subtle race conditions and bugs, with every fix causing two new problems). I absolutely stand behind the pieces that I have delayed rewriting (which are a spaghetti mess, and incredibly difficult to safely modify, but after some minor tweaks are stable enough to leave alone).&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;pullquote-right&quot; data-pullquote=&quot;I’m a big fan of &amp;#8220;radical refactoring.&amp;#8221;&quot;&gt;
I’m a big fan of “radical refactoring.” I’ve refactored several code bases until there was almost nothing left of the original code. But it was done steadily, only doing major rewrites to individual pieces after painstakingly detangling them from the rest of the code (usually over the course of several releases). And at the end, there was always some “ball of mud” part that was a bit crazy, but just worked and didn’t need to be touched that often, so we let it be.
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I’ve even refactored a C program into a Go program, by turning it into two independent processes that communicated over sockets, and moving bits from one side of the API to the other.&lt;/p&gt;

&lt;p&gt;(So even “we need to switch languages/platforms entirely” doesn’t stop you from evolving towards a goal.)&lt;/p&gt;

&lt;p&gt;But there’s an exception that Joel doesn’t mention (but I think Martin Fowler does): if you have incredibly &lt;em&gt;buggy&lt;/em&gt; code, that is, if you &lt;em&gt;don’t&lt;/em&gt; have working code, then that’s the time to consider a rewrite. Not ugly code. Not badly designed or horrible to work with code. But code that doesn’t actually work, and several attempts to make it work have failed. That’s when a rewrite (at least of those portions) is likely appropriate.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The discussion then turned to unit testing, and particluarly &lt;a href=&quot;http://hamletdarcy.blogspot.com/2009/06/forgotten-refactorings.html&quot;&gt;Forgotten Refactorings&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Having had some very successful radical refactors on code without solid unit test coverage, I think it’s worth discussing how that can be done.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;pullquote-right&quot; data-pullquote=&quot;redesigning for testablity will *itself* require massive refactoring without unit tests&quot;&gt;
First, unit test coverage is absolutely the best first step. That said, sometimes it is impossible in any meaningful way. When all the most likely and common bugs in your system are race conditions and corner cases involving things outside the program (non-trivial networking, bluetooth, version-specific OS interactions, complex animations, etc), I’ve found unit tests rapidly become tests of mocks, and not tests of the system. We can debate whether or not it is possible or profitable to redesign your system so it is more testable. I’ll even concede that it is and leave arguments about TDD for another day (I’m actually a fan of TDD). But redesigning for testablity will &lt;em&gt;itself&lt;/em&gt; require massive refactoring without unit tests (because you can’t unit test until you make it testable). Even if you have lots of tests, refactoring often means changing the tests dramatically (which means you’re not really testing the same thing). So at &lt;em&gt;some&lt;/em&gt; point, you’re going to find yourself needing to refactor without perfect (or even barely sufficient) unit tests. How do you do it?
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Slow down.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;pullquote-right&quot; data-pullquote=&quot;Slow. Down. Expect your refactor to take many releases.&quot;&gt;
I cannot stress this enough. Slow. Down. Expect your refactor to take many releases. Do a small piece of refactoring, and run it through a full QA cycle (whatever that means for you) and ship it. Do it again and again. My “convert a C project to Go” project included a release where we just shipped the Go code alongside the C code, without even calling the Go code, just to prove it would install and not break anything. Then we built one, tiny, new feature in the Go code. It was so minor and impacted so few users, we were ready to declare it unsupported if it didn’t work. We’d been working on the Go code for almost two years before we cut over to it “for real” (and the vast majority of the code was still in C at that point). But at each step along the way, the system was better, and saner, and more reliable. And at each step along the way, it shipped, and got real field exercise. And we built a lot of tests for it, and we still found bugs that we were unable to build automated tests for. “Fails to determine domain on Mac previously joined to AD domain, but then removed, only on OS X prior to 10.8” or “SMB connection fails to Window 2000 server if username contains space” or “fails to determine correct IP address on Mac with case-sensitive file system if on Cisco VPN.” That kind of stuff.
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Second point that goes along with this is to keep your refactor steps contained. I’ve had so many experimental refactor branches that I threw away because they spiraled out of control and touched too many pieces of the system in non-trivial ways. Don’t be afraid to throw away several attempts at refactoring until you can get your change focused enough that the risk is contained. Sometimes that means creating “firebreaks,” an object that wraps the thing you’re refactoring and provides the old API for code you don’t want to touch yet. Creating a firebreak often starts as just a pass-through that does nothing but call methods on the original. Tedious, but often invaluable. They make it possible to move to your new API piece by piece rather than having to touch half the system in one go.&lt;/p&gt;

&lt;p&gt;I strongly recommend keeping your commits very focused. “Rename FooAdapter to Foo” should be its own commit. Don’t mix it with changes to API. “Rename X to Y” commits are really easy to code review, even if they touch hundreds of files. But if you also changed logic in there, then it’s a monster. Similarly, anything that is an easy win with little risk (like naming things sanely, or moving some duplicated code into a function), do those first and get them into the main code base. That way, when you discover that your ambitious new design is out of control and have to start over, you don’t lose your easy wins.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;pullquote-right&quot; data-pullquote=&quot;go slow and steady and keep shipping.&quot;&gt;
Testing is great. Testing is critical. Testing is necessary. But unit testing is not sufficient. And when there are hundreds of test cases that need to be rewritten, they can be a &lt;em&gt;hindrance&lt;/em&gt; to refactoring. The more important rule in my experience is go slow and steady and keep shipping.
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;And yes. Write your unit tests. We’re professionals here.&lt;/p&gt;</content><author><name>Rob Napier</name></author><summary type="html">I’ve been talking with folks on a Slack about refactoring today, and I thought I’d put some of my thoughts here. Maybe a little less polished than I’d like, but I wanted to get them out of my head and down on “paper.”</summary></entry><entry><title type="html">Talking and Teaching</title><link href="https://robnapier.net/talking" rel="alternate" type="text/html" title="Talking and Teaching" /><published>2016-11-29T10:35:09-05:00</published><updated>2016-11-29T10:35:09-05:00</updated><id>https://robnapier.net/talking</id><content type="html" xml:base="https://robnapier.net/talking">&lt;p&gt;&lt;a href=&quot;https://twitter.com/pepibumur&quot;&gt;Pedro Piñera&lt;/a&gt; makes some important points in his article &lt;a href=&quot;http://ppinera.es/2016/11/16/in-a-world.html&quot;&gt;In a world…&lt;/a&gt;. There are a number of things in there, and you should go read it, but I want to focus on one part, which is the observation that the core “iOS speaker circle” is a fairly small group of people. Pedro notes:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There’s a huge difference when you compare a talk from someone that has been working a lot on the topic and from someone that studied the topic for giving a talk. Why do people do it then? Talks with a lot of value usually come from unknown people. From these people that from the anonymity worked on a topic and they achieved something that they were willing to share. … People don’t care about the company that person had worked for, or the newsletter that the person had written, but instead, what that person wants to share.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While I agree with Pedro’s concern, I disagree that this is the proper ideal.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I’ve learned more about programming from listening to &lt;a href=&quot;https://twitter.com/dimsumthinking&quot;&gt;Daniel Steinberg&lt;/a&gt; talk about baking cookies than I have from a dozen talks from intelligent, highly experienced people who don’t have his skill for teaching. There are a number of speakers whose sessions I will attend no matter their topic because it’ll always be worth the time. I get inspired every time I listen to &lt;a href=&quot;https://twitter.com/jaimeejaimee&quot;&gt;Jaimee Newberry&lt;/a&gt;, even though almost everything about her life and style is different than mine. If I watch &lt;a href=&quot;https://twitter.com/chriseidhof&quot;&gt;Chris Eidhof&lt;/a&gt; live-code, I know I’m going to see some amazing idea that forces me to rethink something in my code.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;pullquote-right&quot; data-pullquote=&quot;I absolutely care who&amp;#8217;s giving the talk.&quot;&gt;
I absolutely care who’s giving the talk. And if we’re going to ask people to spend hours or days of their time and hundreds or thousands of dollars to attend conferences, I think we owe the best we can offer.
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;But while I disagree with some of Pedro’s analysis, he raises a very important point. A community with many teachers and broad sharing is better than one with few teachers and a hierarchical flow of knowledge. How do we improve?&lt;sup id=&quot;fnref:marginalized&quot;&gt;&lt;a href=&quot;#fn:marginalized&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;We should recognize that there’s nothing wrong with having a core group of known, skilled speakers who draw a crowd. We should celebrate that. We should grow that group, and we should use them to make things even better.&lt;/p&gt;

&lt;p&gt;At dotSwift, Daniel Steinberg reached out to all the speakers and offered assistance refining their talks. Conference organizers should encourage and facilitate that kind of mentorship, and use it to reduce the risks of inexperienced speakers. I hope conference organizers speak to each other and share names of promising speakers whom they didn’t have room for. CocoaHeads and other local groups should strive to video their local talks and &lt;a href=&quot;http://cocoaheads.tv&quot;&gt;make them available&lt;/a&gt;. Conference organizers should use those to find and contact promising speakers outside the usual suspects. Local lightning talks have a very low barrier to entry and make an excellent way to get into speaking. Not everyone has a local group, but it’s a start.&lt;/p&gt;

&lt;p&gt;For those without a local group to video them, I always recommend blogging. Learning to write well is a major part of learning to speak well, and the barrier to entry for blogs is lower. A blog doesn’t have to be constantly updated to be helpful. A single, well-written article can be a huge value. This is another important place for conference organizers to search for new speakers, and I think those who are already well known have a duty to amplify lesser-known blogs that are well written and insightful.&lt;/p&gt;

&lt;p&gt;To those who want to speak, I’d like to offer a little advice. I’m not a top-tier speaker. I don’t get invited to many different conferences (thanks to &lt;a href=&quot;http://cocoaconf.com&quot;&gt;CocoaConf&lt;/a&gt; for making room for me so often), and most of my CfP submissions are rejected, but I’ve spoken at 11 conferences over the last 4 years and some of my talks have been very well received, so take my advice for what it’s worth, remembering that it comes from someone with a lot of privilege. Not all of it applies easily to marginalized groups, but hopefully it can be of some help.&lt;/p&gt;

&lt;p&gt;First, I want to quote Pedro again:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;New announcements from Apple are the perfect source of topics for talks, grabbing it quickly is crucial: Protocol Oriented, Swift Open Source, Extension, Swift in the server… You can build your developer brand around the topic. After a few conferences talking about it, the community will tag you as the expert in the topic X. You might not have worked in a production environment with that new thing, you might not have faced the real use cases and issues, but documentation is perfect to prepare a talk based on it, isn’t it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span class=&quot;pullquote-right&quot; data-pullquote=&quot;You don&amp;#8217;t have to chase the &amp;#8220;current cool thing.&amp;#8221;&quot;&gt;
Yes! I totally agree with most of this, except that this is &lt;em&gt;positive&lt;/em&gt;. I take exception to a few points, though. First, “grabbing it quickly” is not crucial. Few people talk about Bluetooth or CoreMotion despite them being around for years. If those interest you, there’s plenty of room for new talks. (I sure would love some more on Bluetooth!) Would you be a better speaker if you shipped many production products with them? Of course. But you can still help a lot of people understand what’s possible by spending a few months going a little further than most and coming back and teaching. Don’t think you have to know everything before you’re allowed to say something! Just be honest and don’t pretend to know more than you do. There are many topics to explore. &lt;a href=&quot;https://twitter.com/batalia&quot;&gt;Natalia Berdys&lt;/a&gt; gives a &lt;a href=&quot;https://realm.io/news/tryswift-natalia-berdy-random-talk-consistent-world-noise-swift-gamekit-ios/&quot;&gt;brilliant talk&lt;/a&gt; on random number generation. You can’t get much more niche than that. You don’t have to chase the “current cool thing.”
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I don’t know how it is for most speakers, but for me, preparing a talk is very difficult. It took me nearly five months to develop my &lt;a href=&quot;https://realm.io/news/tryswift-rob-napier-swift-legacy-functional-programming/&quot;&gt;talk for try! Swift&lt;/a&gt;. I completely rewrote it four times and practiced it for weeks. I think many speakers are much faster at this than I am, so it may not be so hard for you. But if you find it challenging and find yourself throwing away draft after draft because you can’t figure out what you’re trying to say, just know you’re not alone. If it matters to you, keep at it, and don’t be afraid to throw away a draft that isn’t working.&lt;sup id=&quot;fnref:privilege&quot;&gt;&lt;a href=&quot;#fn:privilege&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;If you want to give a talk, and think I can help you make it better, please reach out. I’ve critiqued talks before, and I’m happy to keep doing it. (I will start by asking you to evaluate the talk using &lt;a href=&quot;http://www.slideshare.net/garrets/goethes-three-questions&quot;&gt;Goethe’s Three Questions&lt;/a&gt;. You have been warned.)&lt;/p&gt;

&lt;p&gt;And if you read all this and say “hey, I don’t even &lt;em&gt;want&lt;/em&gt; to give a talk,” that is absolutely fine. Most people don’t. As anyone who’s scheduled CocoaHeads talks before knows, public speaking isn’t for everyone and one reason there’s a small group who speaks so often is because they’re the ones willing to do it. It’s hard and it’s scary and it’s rewarding and it’s valuable. And sometimes it’s even fun. I hope we can include everyone who wants to be part of it. And I hope there’s always a venue for those who want to listen.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:marginalized&quot;&gt;
      &lt;p&gt;I’m only talking here about whether and how to broaden the number of unique speakers, because I believe this is Pedro’s point. I think there’s a different, very important discussion about diversity of background and drawing from marginalized groups. What I’m going to discuss can help, but that problem requires and deserves more targeted effort than I’m discussing here. &lt;a href=&quot;#fnref:marginalized&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:privilege&quot;&gt;
      &lt;p&gt;This advice assumes a lot of privilege. I know there are many people who don’t have the kind of time I do and don’t have the kind of family support I have. I don’t know the answer for that. If I didn’t have much of the privilege I have, I don’t know how I would speak at conferences. Take my advice for what it’s worth; it doesn’t apply to everyone. &lt;a href=&quot;#fnref:privilege&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Rob Napier</name></author><summary type="html">Pedro Piñera makes some important points in his article In a world…. There are a number of things in there, and you should go read it, but I want to focus on one part, which is the observation that the core “iOS speaker circle” is a fairly small group of people. Pedro notes: There’s a huge difference when you compare a talk from someone that has been working a lot on the topic and from someone that studied the topic for giving a talk. Why do people do it then? Talks with a lot of value usually come from unknown people. From these people that from the anonymity worked on a topic and they achieved something that they were willing to share. … People don’t care about the company that person had worked for, or the newsletter that the person had written, but instead, what that person wants to share. While I agree with Pedro’s concern, I disagree that this is the proper ideal.</summary></entry><entry><title type="html">Copying</title><link href="https://robnapier.net/copying" rel="alternate" type="text/html" title="Copying" /><published>2016-09-03T13:56:14-04:00</published><updated>2016-09-03T13:56:14-04:00</updated><id>https://robnapier.net/copying</id><content type="html" xml:base="https://robnapier.net/copying">&lt;p&gt;I’m on my way back from &lt;a href=&quot;http://tryswiftnyc.com&quot;&gt;try! Swift&lt;/a&gt;, which was fantastic. Of course it had those obvious things I’d hope for. Interesting talks, friendly people. Making new friends, and reuniting with old ones. But it also had some surprising delights and lessons.&lt;/p&gt;

&lt;p&gt;I travel pretty well, but sometimes I make mistakes, and this was one of those times. The deodorant I thought I’d packed turned out to be body wash. Now there are a dozen reason that this shouldn’t really matter, and wouldn’t really matter given the A/C and the weather, etc., but I’m a product of my culture, and it was a bit stressful. I tried to find a drug store on the way to the conference, but I was afraid of being late and finally resigned myself to accepting things as they are and moving on.&lt;/p&gt;

&lt;p&gt;And then, in the conference rest room, I discovered a small cache of toiletries under a try! Swift sign saying “if you need one, please take one.” I was dumbfounded. It was a very small kindness, but it mattered to me.
&lt;!--more--&gt;
I spoke to the conference organizer, &lt;a href=&quot;https://twitter.com/NatashaTheRobot&quot;&gt;Natasha&lt;/a&gt;, to thank her. She immediately told me it wasn’t her idea, she’d just copied it from &lt;a href=&quot;https://twitter.com/erikpub/&quot;&gt;Erik Romijn&lt;/a&gt;. I went to thank Erik, and he assured me it wasn’t his idea, he’d just copied it from Django conferences he’d been a part of. So I just wanted to say thanks to whomever came up with this very kind idea.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;To me, the best part of try! Swift was chatting with people during the breaks and in office hours. Hopefully the videos will be up soon, since I missed a few presentations due to conversations that ran long. So if you only “attend” by watching the videos online (like I did for the first one in Tokyo), you’ll unfortunately miss the best parts. I wish I could change that for you, but I can’t. I’m sorry.&lt;/p&gt;

&lt;p&gt;One of the more interesting talks I had was about cut and pasting from Stack Overflow. This practice &lt;a href=&quot;https://www.gitbook.com/book/tra38/essential-copying-and-pasting-from-stack-overflow/details&quot;&gt;gets a lot of shaming&lt;/a&gt;, and we were discussing that. I can’t promise that this conversation actually took the form of a Platonic dialog, but I can’t promise it didn’t, either. You’ll have to see me at a conference to find out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Anubis:&lt;/strong&gt; I’ve only been programming for a little while. Swift is my first language, and I really don’t know anything yet. I find myself just searching Stack Overflow and cutting and pasting code. I know that’s a horrible way to program, but I don’t know what else to do. Before the Internet, I guess people had to figure it out themselves, but we’ve all gotten so lazy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kakophonis:&lt;/strong&gt; Most of my first years programming were just copying BASIC out of &lt;a href=&quot;http://www.nibblemagazine.com/Nibble_Magazines.htm&quot;&gt;Nibble magazine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Anubis:&lt;/strong&gt; You mean reading articles and implementing what they taught?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kakophonis:&lt;/strong&gt; Oh, no. I mean typing hundreds and hundreds of lines of code for full programs that they included.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Anubis:&lt;/strong&gt; So you didn’t really learn much those first few years.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kakophonis:&lt;/strong&gt; I learned a lot. I learned to use my tools. I learned to debug because I made a lot of typing mistakes. But most of all, I learned what good programs looked like. These were working programs written by good programmers. And I didn’t just read their code, I started changing it. Not a lot. I didn’t know a lot. But I learned to change the colors, or add a trivial feature, or just make random changes that made me happier with it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Anubis:&lt;/strong&gt; When did you stop copying other people’s code and become a real programmer?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kakophonis:&lt;/strong&gt; I copy code all the time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Anubis:&lt;/strong&gt; As a short-cut, right? To make a deadline?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kakophonis:&lt;/strong&gt; Not at all. I use others’ code whenever it’s beautiful and useful and they’ve shared it. But you’re right that I copy code a little differently than a beginner does.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Anubis:&lt;/strong&gt; How so?&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;pullquote-right&quot; data-pullquote=&quot;I usually retype the code by hand.&quot;&gt;
&lt;strong&gt;Kakophonis:&lt;/strong&gt; I rarely cut and paste. Maybe it’s a habit from my magazine days, but I usually retype the code by hand. Stack Overflow answers aren’t very long, and retyping gives me a chance to really think about what the code is doing. And then, if the code works and solves my problem, I usually restyle it to match my preferences and make it a little more my own. I almost always rename things. Sometimes I rewrite it from scratch. I make sure I know what each line does and why it’s there.
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Anubis:&lt;/strong&gt; Is that all?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kakophonis:&lt;/strong&gt; If the code is more than a line or two, I generally add a comment crediting the source.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Anubis:&lt;/strong&gt; For politeness?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kakophonis:&lt;/strong&gt; Yes, but more importantly, I want future maintainers, which is sometimes me, to know the context around the code, why it does things this way. That keeps them from creating regression bugs if they ever need to rewrite it further.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Anubis:&lt;/strong&gt; It sounds like you might learn more about programming from copying that way than from doing it yourself.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;pullquote-right&quot; data-pullquote=&quot;A mark of a good programmer is the ability to distinguish what they should copy from what they shouldn&amp;#8217;t.&quot;&gt;
&lt;strong&gt;Kakophonis:&lt;/strong&gt; Exactly. But copying only improves your code and your understanding if you choose the right things to copy. Many answers on Stack Overflow are incorrect, or they’re presented as magic incantations that may work, but are fragile. A mark of a good programmer is the ability to distinguish what they should copy from what they shouldn’t. Stack Overflow provides beginners some clues about quality, like votes and reputation and comments, but ultimately it’s experience that will help you recognize good code.
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Anubis:&lt;/strong&gt; So Stack Overflow doesn’t make us weak programmers?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kakophonis:&lt;/strong&gt; It’s a tool. It is what you make of it. Programmers today have many more resources than they did before the Internet. It’s easy to think that the previous generations had it much harder. But computers and programs were also much, much simpler. No networking. No threading. Not even a GUI. I’m amazed that anyone is able to jump straight to building an iOS app with no programming experience. I had 25 years of experience before I encountered my first multi-threaded program. No, I don’t think beginning programmers today are weak.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Sometimes life is not unlike programming. Who and what we choose to copy says a lot about us. Choosing to use someone’s idea is still a choice. Give credit to your inspirations, but don’t discount the wisdom in picking something beautiful to copy.&lt;/p&gt;</content><author><name>Rob Napier</name></author><summary type="html">I’m on my way back from try! Swift, which was fantastic. Of course it had those obvious things I’d hope for. Interesting talks, friendly people. Making new friends, and reuniting with old ones. But it also had some surprising delights and lessons. I travel pretty well, but sometimes I make mistakes, and this was one of those times. The deodorant I thought I’d packed turned out to be body wash. Now there are a dozen reason that this shouldn’t really matter, and wouldn’t really matter given the A/C and the weather, etc., but I’m a product of my culture, and it was a bit stressful. I tried to find a drug store on the way to the conference, but I was afraid of being late and finally resigned myself to accepting things as they are and moving on. And then, in the conference rest room, I discovered a small cache of toiletries under a try! Swift sign saying “if you need one, please take one.” I was dumbfounded. It was a very small kindness, but it mattered to me.</summary></entry><entry><title type="html">Inspiration</title><link href="https://robnapier.net/inspiration" rel="alternate" type="text/html" title="Inspiration" /><published>2016-08-26T15:46:27-04:00</published><updated>2016-08-26T15:46:27-04:00</updated><id>https://robnapier.net/inspiration</id><content type="html" xml:base="https://robnapier.net/inspiration">&lt;p&gt;As a speaker, writer, and member of our community, &lt;a href=&quot;http://dimsumthinking.com&quot;&gt;Daniel Steinberg&lt;/a&gt; is my inspiration. That’s not a secret. If you and I have spent much time talking after a conference, I’ve probably mentioned it. It’s not the sort of thing you usually say to someone, and I don’t think I ever have, but I’ve learned a lot from his speaking style, and I constantly try to live up to his standard of kindness. I’m not by nature very kind, so if you see me behaving that way, I’m likely trying to do what I think Daniel might.&lt;/p&gt;

&lt;p&gt;This isn’t to say we’re close. We see each other at conferences. We email and tweet. We’re members of a community. So of course I have some idealized picture of him in my mind, without all the this and that of a real person. Even so, he inspires me. When my wife, Janet, and I talk about what’s ahead for our future, we always talk about Daniel and his wife, Kim. I’ve seen them at conferences, traveling together, independent but a team, and I think, hey, we could pull that off when the kids go to school. And Janet and I talk about how to make that work. And we know we only have the shallowest understanding of their real lives, but they inspire us.&lt;/p&gt;

&lt;p&gt;Kim died this week. I didn’t know her well. We’d met, and she was nice to me. She and Daniel always seemed so “together” even when they were apart most of the day. Hearing the news unmoored me and scared me and made me think about myself and my family and my plans. And then my heart broke for Daniel.&lt;/p&gt;

&lt;p&gt;I’m not kind by nature. But I’m part of a community that is, and part of that is Daniel’s influence on us. &lt;a href=&quot;https://twitter.com/designatednerd&quot;&gt;Ellen Shapiro&lt;/a&gt; has been kind and &lt;a href=&quot;http://support.smiletrain.org/site/RedirectHandler?type=goto&amp;amp;key=ios-for-kim&quot;&gt;set up a fund&lt;/a&gt; to let us support SmileTrain, where Daniel and his daughter Maggie have asked us to give in Kim’s name. I had never heard of SmileTrain, but it is so perfect. It is kind. And it is practical. It is literally the gift of a smile. It is Daniel and Kim.&lt;/p&gt;</content><author><name>Rob Napier</name></author><summary type="html">As a speaker, writer, and member of our community, Daniel Steinberg is my inspiration. That’s not a secret. If you and I have spent much time talking after a conference, I’ve probably mentioned it. It’s not the sort of thing you usually say to someone, and I don’t think I ever have, but I’ve learned a lot from his speaking style, and I constantly try to live up to his standard of kindness. I’m not by nature very kind, so if you see me behaving that way, I’m likely trying to do what I think Daniel might. This isn’t to say we’re close. We see each other at conferences. We email and tweet. We’re members of a community. So of course I have some idealized picture of him in my mind, without all the this and that of a real person. Even so, he inspires me. When my wife, Janet, and I talk about what’s ahead for our future, we always talk about Daniel and his wife, Kim. I’ve seen them at conferences, traveling together, independent but a team, and I think, hey, we could pull that off when the kids go to school. And Janet and I talk about how to make that work. And we know we only have the shallowest understanding of their real lives, but they inspire us. Kim died this week. I didn’t know her well. We’d met, and she was nice to me. She and Daniel always seemed so “together” even when they were apart most of the day. Hearing the news unmoored me and scared me and made me think about myself and my family and my plans. And then my heart broke for Daniel. I’m not kind by nature. But I’m part of a community that is, and part of that is Daniel’s influence on us. Ellen Shapiro has been kind and set up a fund to let us support SmileTrain, where Daniel and his daughter Maggie have asked us to give in Kim’s name. I had never heard of SmileTrain, but it is so perfect. It is kind. And it is practical. It is literally the gift of a smile. It is Daniel and Kim.</summary></entry><entry><title type="html">NSData, My Old Friend</title><link href="https://robnapier.net/nsdata" rel="alternate" type="text/html" title="NSData, My Old Friend" /><published>2015-10-07T20:27:00-04:00</published><updated>2015-10-07T20:27:00-04:00</updated><id>https://robnapier.net/nsdata</id><content type="html" xml:base="https://robnapier.net/nsdata">&lt;h2 id=&quot;or-how-i-learned-to-stop-worrying-and-love-foundation&quot;&gt;Or… “How I learned to stop worrying, and love Foundation.”&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Forgive me, NSData. I was running around with that flashy [UInt8], acting like you didn’t have everything I need. I’ve learned my lesson.&lt;/p&gt;

  &lt;p&gt;— Rob Napier (@cocoaphony) &lt;a href=&quot;https://twitter.com/cocoaphony/status/648514927678910464&quot;&gt;September 28, 2015&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I did a lot of writing and rewriting of the &lt;a href=&quot;https://github.com/RNCryptor/RNCryptor/releases/tag/RNCryptor-4.0.0-beta.1&quot;&gt;Swift version of RNCryptor&lt;/a&gt;. I struggled especially with what type to use for data. I gravitated quickly to &lt;code class=&quot;highlighter-rouge&quot;&gt;[UInt8]&lt;/code&gt; with all its apparent Swiftiness. But in the end, after many iterations, I refactored back to &lt;code class=&quot;highlighter-rouge&quot;&gt;NSData&lt;/code&gt;, and I’m really glad I did.&lt;/p&gt;

&lt;p&gt;This is the story of why.
&lt;!-- MORE --&gt;&lt;/p&gt;

&lt;h3 id=&quot;in-fair-frameworks-where-we-lay-our-scene&quot;&gt;In fair frameworks, where we lay our scene&lt;/h3&gt;

&lt;p&gt;First, I want to be clear that I don’t think &lt;code class=&quot;highlighter-rouge&quot;&gt;[UInt8]&lt;/code&gt; is bad. In some places it’s better than &lt;code class=&quot;highlighter-rouge&quot;&gt;NSData&lt;/code&gt;, but there are tradeoffs, and ultimately I found the tradeoffs favored &lt;code class=&quot;highlighter-rouge&quot;&gt;NSData&lt;/code&gt; today. Some of those will improve in Future Swift, and I suspect something more Swifty than &lt;code class=&quot;highlighter-rouge&quot;&gt;NSData&lt;/code&gt; will be the way of the future. But today, in the kinds of projects I work on, there’s a lot going for &lt;code class=&quot;highlighter-rouge&quot;&gt;NSData&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;“In the kinds of projects I work on” is an important caveat. I mostly build things that are used by other developers; frameworks, engines, services, even just snippets of code. I don’t build a lot of full applications that an end user would see. And the systems I build typically have a very small API surface. They typically do just one thing, and they’re built to be easily clicked together with things that I didn’t write.&lt;/p&gt;

&lt;p&gt;To achieve that, I try to make most of my code as self-contained as possible, with minimal dependencies. I try to make it easy to plug into whatever system you prefer. That usually means sticking as much as possible to the types provided by the system. Much as I love &lt;a href=&quot;https://github.com/antitypical/Result&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Result&lt;/code&gt;&lt;/a&gt;, none of my systems use it externally (and only a few use it internally). I try to avoid exposing my caller to any cleverness. If they’re familiar with the platform, I want them to find my API obvious, even boring. If they have a preferred error handling system, they probably have a way to convert &lt;code class=&quot;highlighter-rouge&quot;&gt;throws&lt;/code&gt; to it, since that’s what Cocoa generates. So I use &lt;code class=&quot;highlighter-rouge&quot;&gt;throws&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;the-elephant-in-the-room&quot;&gt;The elephant in the room&lt;/h3&gt;

&lt;p&gt;I see a lot of Swift devs behaving as though Cocoa has somehow disappeared. Cocoa has become the embarrassing uncle that no one wants to acknowledge, even though he’s sitting right there at Thanksgiving dinner passing you the potatoes. And this is crazy. First, Cocoa is a &lt;em&gt;great&lt;/em&gt; framework, filled with all kinds of tools that we use every day, implemented well and refined for years. And second, Cocoa is a &lt;em&gt;required&lt;/em&gt; framework, filled with tools that we &lt;em&gt;have&lt;/em&gt; to use every day if we want to write apps.&lt;/p&gt;

&lt;p&gt;Trying to cordon off Cocoa means constantly converting your types and patterns. That’s horrible for programs, and it’s very unswifty. Swift is all about integrating cleanly with Cocoa.&lt;/p&gt;

&lt;p&gt;If you’re writing Cocoa apps you wind up with &lt;code class=&quot;highlighter-rouge&quot;&gt;NSData&lt;/code&gt; all the time. You get it when you read or write files, when you download things from the network, when you create PNGs, when you serialize. You can’t escape &lt;code class=&quot;highlighter-rouge&quot;&gt;NSData&lt;/code&gt;. Swift automatically bridges &lt;code class=&quot;highlighter-rouge&quot;&gt;NSString&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;NSArray&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;NSError&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorType&lt;/code&gt;. Some day I hope &lt;a href=&quot;http://www.openradar.me/23010231&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSData&lt;/code&gt; gets a bridge&lt;/a&gt;, but it doesn’t have one today. So the question is what to do in the meantime?&lt;/p&gt;

&lt;p&gt;There are basically two options: build the bridge or use &lt;code class=&quot;highlighter-rouge&quot;&gt;NSData&lt;/code&gt;. Building the bridge (without modifying stdlib) is tricky if you want to avoid copying. It’s not hard if you’re not worried about performance, but an &lt;code class=&quot;highlighter-rouge&quot;&gt;NSData&lt;/code&gt; can easily be multiple megabytes and that’s both time and memory. Even temporary copies raise your high water mark, which hurts the whole system. Yes, I know all about premature optimization, but when you’re building frameworks you need to avoid patterns that are reasonably likely to cause performance problems. Even when you’re building just one app, there’s a difference between “build simply, then optimize” and “throw performance out the window until Apple rejects your app, then optimize.” If it were just one copy, and it made everything else really simple, that might be worth discussing. But making a copy every time you move from one part of the system to another is a problem.&lt;/p&gt;

&lt;p&gt;With enough work you can solve this problem. It’s not tons of code, but it is a little bit tricky to be certain you’ve done it exactly right and won’t leak or crash (and much trickier to do from outside of stdlib). But is that work and complexity worth it? What problems were we really solving converting &lt;code class=&quot;highlighter-rouge&quot;&gt;NSData&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;[UInt8]&lt;/code&gt;?&lt;/p&gt;

&lt;h3 id=&quot;the-magic-that-is-array&quot;&gt;The magic that is &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Even if you don’t care about &lt;code class=&quot;highlighter-rouge&quot;&gt;NSData&lt;/code&gt; interop, using &lt;code class=&quot;highlighter-rouge&quot;&gt;[UInt8]&lt;/code&gt; doesn’t give you a magical unicorn API. &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; has all kinds of little sharp edges that surprise and confuse if you want to very careful of making copies.&lt;/p&gt;

&lt;p&gt;Let’s start with a simple function using &lt;code class=&quot;highlighter-rouge&quot;&gt;NSData&lt;/code&gt; and see what happens with &lt;code class=&quot;highlighter-rouge&quot;&gt;[UInt8]&lt;/code&gt;. This function takes a &lt;code class=&quot;highlighter-rouge&quot;&gt;CCCryptorRef&lt;/code&gt; and updates it with some data, writes the resulting encrypted data to a buffer and returns the buffer.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func updateCryptor(cryptor: CCCryptorRef, data: NSData) -&amp;gt; NSData {
    let outputLength = CCCryptorGetOutputLength(cryptor, data.length, false)
    let buffer = NSMutableData(length: outputLength)!
    var dataOutMoved: Int = 0

    let result = CCCryptorUpdate(cryptor,
        data.bytes, data.length,
        buffer.mutableBytes, buffer.length,
        &amp;amp;dataOutMoved)
    guard result == 0 else { fatalError() }

    buffer.length = dataOutMoved
    return buffer
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;No problems there IMO. That’s a fine implementation. Easy to read and understand (if you understand &lt;code class=&quot;highlighter-rouge&quot;&gt;CCCryptorRef&lt;/code&gt;). The &lt;code class=&quot;highlighter-rouge&quot;&gt;[UInt8]&lt;/code&gt; implementation is about the same. I don’t think you could say one is really much cleaner than the other.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func updateCryptor_(cryptor: CCCryptorRef, data: [UInt8]) -&amp;gt; [UInt8] {
    let outputLength = CCCryptorGetOutputLength(cryptor, data.length, false)
    var buffer = [UInt8](count: outputLength, repeatedValue: 0)
    var dataOutMoved: Int = 0

    let result = CCCryptorUpdate(cryptor,
        data, data.count,
        &amp;amp;buffer, buffer.count,
        &amp;amp;dataOutMoved)
    guard result == 0 else { fatalError() }

    buffer[dataOutMoved..&amp;lt;buffer.endIndex] = []
    return buffer
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But is it correct? Can we be certain that &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; is contiguous memory and isn’t really an &lt;code class=&quot;highlighter-rouge&quot;&gt;NSArray&amp;lt;NSNumber&amp;gt;&lt;/code&gt; under the covers? If it is an &lt;code class=&quot;highlighter-rouge&quot;&gt;NSArray&lt;/code&gt;, will this work or will we get the wrong data? Should we use &lt;code class=&quot;highlighter-rouge&quot;&gt;.withUnsafePointer&lt;/code&gt; here? I studied the docs, and talked to several devs (including Apple devs), and in the end am pretty sure that this will always work. But I’m only “pretty sure.” And that’s only because of kind people at Apple (especially @jckarter) taking time to walk through it with me. Not everyone has that.&lt;/p&gt;

&lt;p&gt;This “but is it correct?” came up all over the place. Would this operation cause a copy? Exactly how long is an &lt;code class=&quot;highlighter-rouge&quot;&gt;UnsafeBufferPointer&lt;/code&gt; valid? There’s a lot of bridging magic in &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;, and it’s not always clear what is &lt;em&gt;promised&lt;/em&gt;. Testing only gets you so far if the current implementation just happens to work. Sometimes behaviors change just by importing Foundation.&lt;/p&gt;

&lt;p&gt;I thought I might avoid the Cocoa-bridging ambiguities of &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; by using &lt;code class=&quot;highlighter-rouge&quot;&gt;ContiguousArray&lt;/code&gt; instead. That way I could be very precise about my expectations. But it turns out that passing &lt;code class=&quot;highlighter-rouge&quot;&gt;ContiguousArray&lt;/code&gt; to C behaves very differently than passing &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; gets turned into a pointer to the first element, but &lt;code class=&quot;highlighter-rouge&quot;&gt;ContiguousArray&lt;/code&gt; gets turned into a pointer to the struct. So the &lt;code class=&quot;highlighter-rouge&quot;&gt;ContiguousArray&lt;/code&gt; gets corrupted and you crash. &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; is more magical than you think. Magic is wonderful until your program crashes and you don’t know why.&lt;/p&gt;

&lt;p&gt;I struggled with copy-on-write behavior. How do I know if an array’s buffer is shared so that a copy will happen on mutation? Will this code allocate 10MB or 20MB?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func makeArray() -&amp;gt; [UInt8] {
    return Array(count: 10_000_000, repeatedValue: 0)
}
var array = makeArray() + [1]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What tests would prove that? Is it promised or just the current implementation? Does optimization level matter? Is it the same if &lt;code class=&quot;highlighter-rouge&quot;&gt;makeArray()&lt;/code&gt; is in another module than the caller? Would small changes in my code lead to dramatic and surprising performance changes in apps that use my framework? This was a common problem in Scala before the &lt;code class=&quot;highlighter-rouge&quot;&gt;@tailrec&lt;/code&gt; annotation was added. Very small tweaks to a recursive function could cause your stack to explode because you quietly broke tail call optimization. All your unit tests still pass, but the program crashes.&lt;/p&gt;

&lt;p&gt;In the end, I spent hours trying to be certain of the precise behaviors of &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; bridging and copying. And all that to replace &lt;code class=&quot;highlighter-rouge&quot;&gt;NSData&lt;/code&gt; code that is perfectly fine.&lt;/p&gt;

&lt;h3 id=&quot;slice-and-dice&quot;&gt;Slice and dice&lt;/h3&gt;

&lt;p&gt;When updating the cryptor, it is common that you’ll only want some of the data you were passed. You might want to slice off a header, or you might want to chunk the data up to reduce your encryption buffer size. In either case, you want to pass &lt;code class=&quot;highlighter-rouge&quot;&gt;updateCryptor()&lt;/code&gt; a slice.&lt;/p&gt;

&lt;p&gt;For an immutable &lt;code class=&quot;highlighter-rouge&quot;&gt;NSData&lt;/code&gt; that’s easy. Call &lt;code class=&quot;highlighter-rouge&quot;&gt;.subdataWithRange()&lt;/code&gt; and you get another &lt;code class=&quot;highlighter-rouge&quot;&gt;NSData&lt;/code&gt; back with no copying.&lt;/p&gt;

&lt;p&gt;But the &lt;code class=&quot;highlighter-rouge&quot;&gt;SubSequence&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;ArraySlice&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;updateCryptor()&lt;/code&gt; doesn’t accept that. Of course you can copy your slice into a new &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;, but unnecessary copying was what we wanted to avoid.&lt;/p&gt;

&lt;p&gt;We could make all the functions take &lt;code class=&quot;highlighter-rouge&quot;&gt;ArraySlice&lt;/code&gt; and overload all the functions with an &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; interface that forwards to the &lt;code class=&quot;highlighter-rouge&quot;&gt;ArraySlice&lt;/code&gt; interface. But it’s a lot of duplication.&lt;/p&gt;

&lt;p&gt;So I decided to just convert everything to &lt;code class=&quot;highlighter-rouge&quot;&gt;UnsafeBufferPointer&lt;/code&gt; and then pass that around internally. Easier semantics after a one-time conversion. No bridging worries. No unexpected copies. It seemed like a good idea at the time.&lt;/p&gt;

&lt;p&gt;The problem is that using &lt;code class=&quot;highlighter-rouge&quot;&gt;UnsafeBufferPointer&lt;/code&gt; everywhere tends to turn your code inside out. Where you used to say:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;updateCryptor(cryptor, data: data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You now have to say:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;data.withUnsafeBufferPointer { updateCryptor(cryptor, data: $0) }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Two solutions present themselves. First you decide that you are very clever, and use the &lt;code class=&quot;highlighter-rouge&quot;&gt;UnsafeBufferPointer&lt;/code&gt; constructor:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Never do this
updateCryptor(cryptor, data: UnsafeBufferPointer(start: data, count: data.count))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then @jckarter points out that by the time &lt;code class=&quot;highlighter-rouge&quot;&gt;updateCryptor&lt;/code&gt; runs, there’s no promise that the &lt;code class=&quot;highlighter-rouge&quot;&gt;UnsafeBufferPointer&lt;/code&gt; is still valid. ARC could destroy &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; before the statement even completes. (If you know that &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; is life-extended, then it is possible to know this will work, but it’s very unsafe, fragile, and hard to audit. Coding that way breaks everything Swift was trying to fix.)&lt;/p&gt;

&lt;p&gt;So then you start creating function overloads to accept &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ArraySlice&lt;/code&gt; and convert them into &lt;code class=&quot;highlighter-rouge&quot;&gt;UnsafeBufferPointer&lt;/code&gt;, and you have even more duplicated code. And then you realize you want to accept &lt;code class=&quot;highlighter-rouge&quot;&gt;NSData&lt;/code&gt; here, too, so you write an extension that adds &lt;code class=&quot;highlighter-rouge&quot;&gt;.withUnsafeBufferPointer()&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;NSData&lt;/code&gt;, and now you have four versions of every function, and you realize you really should use a protocol instead. Brilliant!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;protocol BufferType {
    func withUnsafeBufferPointer&amp;lt;R&amp;gt;(body: (UnsafeBufferPointer&amp;lt;UInt8&amp;gt;) throws -&amp;gt; R) rethrows -&amp;gt; R
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This really feels like it’ll solve all these problems very elegantly. Except for this one problem. You want &lt;code class=&quot;highlighter-rouge&quot;&gt;[UInt8]&lt;/code&gt; to be a &lt;code class=&quot;highlighter-rouge&quot;&gt;BufferType&lt;/code&gt;, but you don’t want &lt;code class=&quot;highlighter-rouge&quot;&gt;[String]&lt;/code&gt; to be a &lt;code class=&quot;highlighter-rouge&quot;&gt;BufferType&lt;/code&gt;. And then you discover that while you can write extensions that only apply to &lt;code class=&quot;highlighter-rouge&quot;&gt;[UInt8]&lt;/code&gt;, you can’t use those extensions to conform to a protocol. And that’s when the screaming starts. And then the barginning, and then the drinking.&lt;/p&gt;

&lt;p&gt;When you get to the muttering, you came back and start building a &lt;code class=&quot;highlighter-rouge&quot;&gt;Buffer&lt;/code&gt; class to wrap &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ArraySlice&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;NSData&lt;/code&gt;, and even &lt;code class=&quot;highlighter-rouge&quot;&gt;CollectionType&lt;/code&gt; to give it all a consistent interface. It’s ok, but it creates another “thing” for callers to deal with. In almost all cases, they have an &lt;code class=&quot;highlighter-rouge&quot;&gt;NSData&lt;/code&gt;. There is almost no chance they had a &lt;code class=&quot;highlighter-rouge&quot;&gt;[UInt8]&lt;/code&gt;. This is all just an extra layer for callers to deal with and to get in the way of the optimizer.&lt;/p&gt;

&lt;p&gt;I want to remind you that all of this, all these many, many hours of struggle, were to avoid the simple &lt;code class=&quot;highlighter-rouge&quot;&gt;NSData&lt;/code&gt; code that took two minutes to write, works great, and is pretty darn Swifty as long as you don’t define “Swifty” as “does not import Foundation.”&lt;/p&gt;

&lt;h2 id=&quot;whats-the-matter-with-nsdata&quot;&gt;What’s the matter with NSData?&lt;/h2&gt;

&lt;p&gt;So why did I resist using &lt;code class=&quot;highlighter-rouge&quot;&gt;NSData&lt;/code&gt; anyway? Well, even though I believe the Foundation is absolutely a part of Swift, some of it isn’t &lt;em&gt;great&lt;/em&gt; Swift. Notably &lt;code class=&quot;highlighter-rouge&quot;&gt;NSData&lt;/code&gt; isn’t a &lt;code class=&quot;highlighter-rouge&quot;&gt;CollectionType&lt;/code&gt;. But fixing that is &lt;a href=&quot;https://gist.github.com/rnapier/da148690af63c401097d&quot;&gt;pretty easy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;End-to-end &lt;code class=&quot;highlighter-rouge&quot;&gt;NSData&lt;/code&gt; also opened up some other opportunities for me, namely &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_data&lt;/code&gt;, which had threatened to be another can of worms with &lt;code class=&quot;highlighter-rouge&quot;&gt;[UInt8]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For some, none of this will matter. The vast majority of my problems come from trying to dodge unnecessary copies. Much of this is very simple if you’re willing to just copy the data all over the place. For many kinds of problems, that’s fine. Use whatever you like. The copy-on-write system is actually pretty awesome and for most problems you can certainly trust it.&lt;/p&gt;

&lt;p&gt;But for those in my situation, where performance is a serious consideration in much of your code, you’re looking for predictability as much as speed, and data can be huge, my hope is we get a &lt;code class=&quot;highlighter-rouge&quot;&gt;Buffer&lt;/code&gt; type (or &lt;code class=&quot;highlighter-rouge&quot;&gt;Data&lt;/code&gt; or whatever) that acts as a bridge to &lt;code class=&quot;highlighter-rouge&quot;&gt;NSData&lt;/code&gt;, supports &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_data&lt;/code&gt;, and plays nicely with stdlib. But until that comes, I think &lt;code class=&quot;highlighter-rouge&quot;&gt;NSData&lt;/code&gt; is just fine.&lt;/p&gt;</content><author><name>Rob Napier</name></author><summary type="html">Or… “How I learned to stop worrying, and love Foundation.” Forgive me, NSData. I was running around with that flashy [UInt8], acting like you didn’t have everything I need. I’ve learned my lesson. — Rob Napier (@cocoaphony) September 28, 2015 I did a lot of writing and rewriting of the Swift version of RNCryptor. I struggled especially with what type to use for data. I gravitated quickly to [UInt8] with all its apparent Swiftiness. But in the end, after many iterations, I refactored back to NSData, and I’m really glad I did. This is the story of why. In fair frameworks, where we lay our scene First, I want to be clear that I don’t think [UInt8] is bad. In some places it’s better than NSData, but there are tradeoffs, and ultimately I found the tradeoffs favored NSData today. Some of those will improve in Future Swift, and I suspect something more Swifty than NSData will be the way of the future. But today, in the kinds of projects I work on, there’s a lot going for NSData. “In the kinds of projects I work on” is an important caveat. I mostly build things that are used by other developers; frameworks, engines, services, even just snippets of code. I don’t build a lot of full applications that an end user would see. And the systems I build typically have a very small API surface. They typically do just one thing, and they’re built to be easily clicked together with things that I didn’t write. To achieve that, I try to make most of my code as self-contained as possible, with minimal dependencies. I try to make it easy to plug into whatever system you prefer. That usually means sticking as much as possible to the types provided by the system. Much as I love Result, none of my systems use it externally (and only a few use it internally). I try to avoid exposing my caller to any cleverness. If they’re familiar with the platform, I want them to find my API obvious, even boring. If they have a preferred error handling system, they probably have a way to convert throws to it, since that’s what Cocoa generates. So I use throws. The elephant in the room I see a lot of Swift devs behaving as though Cocoa has somehow disappeared. Cocoa has become the embarrassing uncle that no one wants to acknowledge, even though he’s sitting right there at Thanksgiving dinner passing you the potatoes. And this is crazy. First, Cocoa is a great framework, filled with all kinds of tools that we use every day, implemented well and refined for years. And second, Cocoa is a required framework, filled with tools that we have to use every day if we want to write apps. Trying to cordon off Cocoa means constantly converting your types and patterns. That’s horrible for programs, and it’s very unswifty. Swift is all about integrating cleanly with Cocoa. If you’re writing Cocoa apps you wind up with NSData all the time. You get it when you read or write files, when you download things from the network, when you create PNGs, when you serialize. You can’t escape NSData. Swift automatically bridges NSString and String, NSArray and Array, NSError and ErrorType. Some day I hope NSData gets a bridge, but it doesn’t have one today. So the question is what to do in the meantime? There are basically two options: build the bridge or use NSData. Building the bridge (without modifying stdlib) is tricky if you want to avoid copying. It’s not hard if you’re not worried about performance, but an NSData can easily be multiple megabytes and that’s both time and memory. Even temporary copies raise your high water mark, which hurts the whole system. Yes, I know all about premature optimization, but when you’re building frameworks you need to avoid patterns that are reasonably likely to cause performance problems. Even when you’re building just one app, there’s a difference between “build simply, then optimize” and “throw performance out the window until Apple rejects your app, then optimize.” If it were just one copy, and it made everything else really simple, that might be worth discussing. But making a copy every time you move from one part of the system to another is a problem. With enough work you can solve this problem. It’s not tons of code, but it is a little bit tricky to be certain you’ve done it exactly right and won’t leak or crash (and much trickier to do from outside of stdlib). But is that work and complexity worth it? What problems were we really solving converting NSData to [UInt8]? The magic that is Array Even if you don’t care about NSData interop, using [UInt8] doesn’t give you a magical unicorn API. Array has all kinds of little sharp edges that surprise and confuse if you want to very careful of making copies. Let’s start with a simple function using NSData and see what happens with [UInt8]. This function takes a CCCryptorRef and updates it with some data, writes the resulting encrypted data to a buffer and returns the buffer. func updateCryptor(cryptor: CCCryptorRef, data: NSData) -&amp;gt; NSData { let outputLength = CCCryptorGetOutputLength(cryptor, data.length, false) let buffer = NSMutableData(length: outputLength)! var dataOutMoved: Int = 0 let result = CCCryptorUpdate(cryptor, data.bytes, data.length, buffer.mutableBytes, buffer.length, &amp;amp;dataOutMoved) guard result == 0 else { fatalError() } buffer.length = dataOutMoved return buffer } No problems there IMO. That’s a fine implementation. Easy to read and understand (if you understand CCCryptorRef). The [UInt8] implementation is about the same. I don’t think you could say one is really much cleaner than the other. func updateCryptor_(cryptor: CCCryptorRef, data: [UInt8]) -&amp;gt; [UInt8] { let outputLength = CCCryptorGetOutputLength(cryptor, data.length, false) var buffer = [UInt8](count: outputLength, repeatedValue: 0) var dataOutMoved: Int = 0 let result = CCCryptorUpdate(cryptor, data, data.count, &amp;amp;buffer, buffer.count, &amp;amp;dataOutMoved) guard result == 0 else { fatalError() } buffer[dataOutMoved..&amp;lt;buffer.endIndex] = [] return buffer } But is it correct? Can we be certain that data is contiguous memory and isn’t really an NSArray&amp;lt;NSNumber&amp;gt; under the covers? If it is an NSArray, will this work or will we get the wrong data? Should we use .withUnsafePointer here? I studied the docs, and talked to several devs (including Apple devs), and in the end am pretty sure that this will always work. But I’m only “pretty sure.” And that’s only because of kind people at Apple (especially @jckarter) taking time to walk through it with me. Not everyone has that. This “but is it correct?” came up all over the place. Would this operation cause a copy? Exactly how long is an UnsafeBufferPointer valid? There’s a lot of bridging magic in Array, and it’s not always clear what is promised. Testing only gets you so far if the current implementation just happens to work. Sometimes behaviors change just by importing Foundation. I thought I might avoid the Cocoa-bridging ambiguities of Array by using ContiguousArray instead. That way I could be very precise about my expectations. But it turns out that passing ContiguousArray to C behaves very differently than passing Array. Array gets turned into a pointer to the first element, but ContiguousArray gets turned into a pointer to the struct. So the ContiguousArray gets corrupted and you crash. Array is more magical than you think. Magic is wonderful until your program crashes and you don’t know why. I struggled with copy-on-write behavior. How do I know if an array’s buffer is shared so that a copy will happen on mutation? Will this code allocate 10MB or 20MB? func makeArray() -&amp;gt; [UInt8] { return Array(count: 10_000_000, repeatedValue: 0) } var array = makeArray() + [1] What tests would prove that? Is it promised or just the current implementation? Does optimization level matter? Is it the same if makeArray() is in another module than the caller? Would small changes in my code lead to dramatic and surprising performance changes in apps that use my framework? This was a common problem in Scala before the @tailrec annotation was added. Very small tweaks to a recursive function could cause your stack to explode because you quietly broke tail call optimization. All your unit tests still pass, but the program crashes. In the end, I spent hours trying to be certain of the precise behaviors of Array bridging and copying. And all that to replace NSData code that is perfectly fine. Slice and dice When updating the cryptor, it is common that you’ll only want some of the data you were passed. You might want to slice off a header, or you might want to chunk the data up to reduce your encryption buffer size. In either case, you want to pass updateCryptor() a slice. For an immutable NSData that’s easy. Call .subdataWithRange() and you get another NSData back with no copying. But the SubSequence of Array is ArraySlice, and updateCryptor() doesn’t accept that. Of course you can copy your slice into a new Array, but unnecessary copying was what we wanted to avoid. We could make all the functions take ArraySlice and overload all the functions with an Array interface that forwards to the ArraySlice interface. But it’s a lot of duplication. So I decided to just convert everything to UnsafeBufferPointer and then pass that around internally. Easier semantics after a one-time conversion. No bridging worries. No unexpected copies. It seemed like a good idea at the time. The problem is that using UnsafeBufferPointer everywhere tends to turn your code inside out. Where you used to say: updateCryptor(cryptor, data: data) You now have to say: data.withUnsafeBufferPointer { updateCryptor(cryptor, data: $0) } Two solutions present themselves. First you decide that you are very clever, and use the UnsafeBufferPointer constructor: // Never do this updateCryptor(cryptor, data: UnsafeBufferPointer(start: data, count: data.count)) Then @jckarter points out that by the time updateCryptor runs, there’s no promise that the UnsafeBufferPointer is still valid. ARC could destroy data before the statement even completes. (If you know that data is life-extended, then it is possible to know this will work, but it’s very unsafe, fragile, and hard to audit. Coding that way breaks everything Swift was trying to fix.) So then you start creating function overloads to accept Array and ArraySlice and convert them into UnsafeBufferPointer, and you have even more duplicated code. And then you realize you want to accept NSData here, too, so you write an extension that adds .withUnsafeBufferPointer() to NSData, and now you have four versions of every function, and you realize you really should use a protocol instead. Brilliant! protocol BufferType { func withUnsafeBufferPointer&amp;lt;R&amp;gt;(body: (UnsafeBufferPointer&amp;lt;UInt8&amp;gt;) throws -&amp;gt; R) rethrows -&amp;gt; R } This really feels like it’ll solve all these problems very elegantly. Except for this one problem. You want [UInt8] to be a BufferType, but you don’t want [String] to be a BufferType. And then you discover that while you can write extensions that only apply to [UInt8], you can’t use those extensions to conform to a protocol. And that’s when the screaming starts. And then the barginning, and then the drinking. When you get to the muttering, you came back and start building a Buffer class to wrap Array, ArraySlice, NSData, and even CollectionType to give it all a consistent interface. It’s ok, but it creates another “thing” for callers to deal with. In almost all cases, they have an NSData. There is almost no chance they had a [UInt8]. This is all just an extra layer for callers to deal with and to get in the way of the optimizer. I want to remind you that all of this, all these many, many hours of struggle, were to avoid the simple NSData code that took two minutes to write, works great, and is pretty darn Swifty as long as you don’t define “Swifty” as “does not import Foundation.” What’s the matter with NSData? So why did I resist using NSData anyway? Well, even though I believe the Foundation is absolutely a part of Swift, some of it isn’t great Swift. Notably NSData isn’t a CollectionType. But fixing that is pretty easy. End-to-end NSData also opened up some other opportunities for me, namely dispatch_data, which had threatened to be another can of worms with [UInt8]. For some, none of this will matter. The vast majority of my problems come from trying to dodge unnecessary copies. Much of this is very simple if you’re willing to just copy the data all over the place. For many kinds of problems, that’s fine. Use whatever you like. The copy-on-write system is actually pretty awesome and for most problems you can certainly trust it. But for those in my situation, where performance is a serious consideration in much of your code, you’re looking for predictability as much as speed, and data can be huge, my hope is we get a Buffer type (or Data or whatever) that acts as a bridge to NSData, supports dispatch_data, and plays nicely with stdlib. But until that comes, I think NSData is just fine.</summary></entry><entry><title type="html">Type-erasure in stdlib</title><link href="https://robnapier.net/type-erasure-in-stdlib" rel="alternate" type="text/html" title="Type-erasure in stdlib" /><published>2015-10-06T19:05:13-04:00</published><updated>2015-10-06T19:05:13-04:00</updated><id>https://robnapier.net/type-erasure-in-stdlib</id><content type="html" xml:base="https://robnapier.net/type-erasure-in-stdlib">&lt;p&gt;When &lt;a href=&quot;http://robnapier.net/erasure&quot;&gt;last we talked about type erasure&lt;/a&gt;, I described an easy way to build type erasures using closures. And I mentioned:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(While this works exactly like AnySequence, this isn’t how AnySequence is implemented. In my next post I’ll discuss why and how to implement type erasers like stdlib does.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At the time I thought I’d pretty well nailed it down, but every time I dug into it I found another little thing I’d missed, and it never seemed to end. And with stdlib open sourcing soon, you’ll all just be able to read this yourselves, so why embarrass myself getting it all wrong? Over time I kind of hoped you all had forgotten that comment and planned to move on to other things. But then I was &lt;a href=&quot;https://twitter.com/My_kl/status/650796108789219328&quot;&gt;busted by Michael Welch&lt;/a&gt;, and so I had to finish the spelunking and here you go.
&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;So, &lt;a href=&quot;https://github.com/rnapier/MyAnySequence&quot;&gt;here&lt;/a&gt; is my annotated implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;AnyGenerator&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;AnySequence&lt;/code&gt; that I believe pretty closely matches Apple’s implementation in stdlib (minus some low-level optimizations in &lt;code class=&quot;highlighter-rouge&quot;&gt;AnySequence&lt;/code&gt; that I’ll call out when we get there). I’ve named my versions of public symbols with a trailing underscore to differentiate from the Swift version. For private symbols (with leading underscore), I’ve used the same name Swift does.&lt;/p&gt;

&lt;p&gt;All type information was determined using &lt;code class=&quot;highlighter-rouge&quot;&gt;:type lookup&lt;/code&gt; in the Swift REPL. In a few places I checked the implementation with Hopper, but in most cases, once you have the types, the implementation is obvious. (There’s a deep lesson in there if you pay attention.)&lt;/p&gt;</content><author><name>Rob Napier</name></author><summary type="html">When last we talked about type erasure, I described an easy way to build type erasures using closures. And I mentioned: (While this works exactly like AnySequence, this isn’t how AnySequence is implemented. In my next post I’ll discuss why and how to implement type erasers like stdlib does.) At the time I thought I’d pretty well nailed it down, but every time I dug into it I found another little thing I’d missed, and it never seemed to end. And with stdlib open sourcing soon, you’ll all just be able to read this yourselves, so why embarrass myself getting it all wrong? Over time I kind of hoped you all had forgotten that comment and planned to move on to other things. But then I was busted by Michael Welch, and so I had to finish the spelunking and here you go. So, here is my annotated implementation of AnyGenerator and AnySequence that I believe pretty closely matches Apple’s implementation in stdlib (minus some low-level optimizations in AnySequence that I’ll call out when we get there). I’ve named my versions of public symbols with a trailing underscore to differentiate from the Swift version. For private symbols (with leading underscore), I’ve used the same name Swift does. All type information was determined using :type lookup in the Swift REPL. In a few places I checked the implementation with Hopper, but in most cases, once you have the types, the implementation is obvious. (There’s a deep lesson in there if you pay attention.)</summary></entry><entry><title type="html">RNCryptor v4</title><link href="https://robnapier.net/rncryptor-v4" rel="alternate" type="text/html" title="RNCryptor v4" /><published>2015-10-04T12:38:36-04:00</published><updated>2015-10-04T12:38:36-04:00</updated><id>https://robnapier.net/rncryptor-v4</id><content type="html" xml:base="https://robnapier.net/rncryptor-v4">&lt;p&gt;After months of writing and rewriting, I am happy to finally announce &lt;a href=&quot;https://github.com/RNCryptor/RNCryptor/releases/tag/RNCryptor-4.0.0-beta.1&quot;&gt;RNCryptor 4 beta 1&lt;/a&gt; in Swift.&lt;/p&gt;

&lt;p&gt;RNCryptor 4 is a complete rewrite of RNCryptor for Swift 2 with full bridging support to Objective-C. It has a streamlined API, simpler installation, and improved internals. It continues to use the &lt;a href=&quot;https://github.com/RNCryptor/RNCryptor-Spec/blob/master/RNCryptor-Spec-v3.md&quot;&gt;v3 data format&lt;/a&gt; and is fully interoperable with &lt;a href=&quot;https://github.com/RNCryptor&quot;&gt;other RNCryptor implementations&lt;/a&gt;.
&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;For users desiring a fully Objective-C solution, &lt;a href=&quot;https://github.com/RNCryptor/RNCryptor/releases/tag/RNCryptor-3.0.1&quot;&gt;v3&lt;/a&gt; is still available. I don’t currently plan to do significant new work on v3, but will consider it if there is strong interest. Going forward, I expect most OS X and iOS projects to be able to accept a mix of ObjC and Swift code. Objective-C continues to be a fully supported language in RNCryptor 4.&lt;/p&gt;

&lt;p&gt;I plan to convert this to a final release in a week or so if no major issues are discovered.&lt;/p&gt;

&lt;p&gt;I now move onto:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Continuing to prepare for &lt;a href=&quot;http://www.dotswift.io&quot;&gt;dotSwift&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Getting back to the blog.&lt;/li&gt;
  &lt;li&gt;RNCryptor v5, which will finally update the data format to improve performance, security, and robustness. Much of the v4 design was specifically to make v5 easier to write.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Rob Napier</name></author><summary type="html">After months of writing and rewriting, I am happy to finally announce RNCryptor 4 beta 1 in Swift. RNCryptor 4 is a complete rewrite of RNCryptor for Swift 2 with full bridging support to Objective-C. It has a streamlined API, simpler installation, and improved internals. It continues to use the v3 data format and is fully interoperable with other RNCryptor implementations. For users desiring a fully Objective-C solution, v3 is still available. I don’t currently plan to do significant new work on v3, but will consider it if there is strong interest. Going forward, I expect most OS X and iOS projects to be able to accept a mix of ObjC and Swift code. Objective-C continues to be a fully supported language in RNCryptor 4. I plan to convert this to a final release in a week or so if no major issues are discovered. I now move onto: Continuing to prepare for dotSwift. Getting back to the blog. RNCryptor v5, which will finally update the data format to improve performance, security, and robustness. Much of the v4 design was specifically to make v5 easier to write.</summary></entry><entry><title type="html">A Little Respect for AnySequence</title><link href="https://robnapier.net/erasure" rel="alternate" type="text/html" title="A Little Respect for AnySequence" /><published>2015-08-04T15:42:00-04:00</published><updated>2015-08-04T15:42:00-04:00</updated><id>https://robnapier.net/erasure</id><content type="html" xml:base="https://robnapier.net/erasure">&lt;p&gt;Once upon a time, when Swift was young, there were a couple of types called &lt;code class=&quot;highlighter-rouge&quot;&gt;SequenceOf&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;GeneratorOf&lt;/code&gt;, and they could type erase stuff. “Type erase?” you may ask. “I thought we &lt;em&gt;loved&lt;/em&gt; types.” We do. Don’t worry. Our types aren’t going anywhere. But sometimes we want them to be a little less…precise.&lt;/p&gt;

&lt;p&gt;In Swift 2, our little type erasers got a rename and some friends. Now they’re all named “Any”-something. So &lt;code class=&quot;highlighter-rouge&quot;&gt;SequenceOf&lt;/code&gt; became &lt;code class=&quot;highlighter-rouge&quot;&gt;AnySequence&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;GeneratorOf&lt;/code&gt; became &lt;code class=&quot;highlighter-rouge&quot;&gt;AnyGenerator&lt;/code&gt; and there are a gaggle of indexes and collections from &lt;code class=&quot;highlighter-rouge&quot;&gt;AnyForwardIndex&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;AnyRandomAccessCollection&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So what are these type erasers? Let’s start with how to use one and we’ll work backwards to why.&lt;!-- more --&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let seq = AnySequence([1,2,3])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This creates an &lt;code class=&quot;highlighter-rouge&quot;&gt;AnySequence&amp;lt;Int&amp;gt;&lt;/code&gt;. It’s just a sequence of Ints that we can iterate over. Isn’t &lt;code class=&quot;highlighter-rouge&quot;&gt;[1,2,3]&lt;/code&gt; also a sequence of Ints we can iterate over? Well, yeah. But it’s also explicitly an Array. And sometimes you don’t want to have to deal with that kind of implementation detail.&lt;/p&gt;

&lt;h2 id=&quot;who-needs-types-like-that&quot;&gt;Who Needs Types Like That?&lt;/h2&gt;

&lt;p&gt;Let’s consider a little more complicated case:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let xs = [1,2,3]
let ys = [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;]
let zs = zip(xs.reverse(), ys.reverse())
// Zip2Sequence&amp;lt;ReverseRandomAccessCollection&amp;lt;Array&amp;lt;Int&amp;gt;&amp;gt;, ReverseRandomAccessCollection&amp;lt;Array&amp;lt;String&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s quite a type. Imagine it as the return type of a function:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func reverseZip&amp;lt;T,U&amp;gt;(xs: [T], _ ys: [U]) -&amp;gt; Zip2Sequence&amp;lt;ReverseRandomAccessCollection&amp;lt;[T]&amp;gt;, ReverseRandomAccessCollection&amp;lt;[U]&amp;gt;&amp;gt; {
  return zip(xs.reverse(), ys.reverse())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s insane. Let’s not do that. Not only is the type overwhelming, but it ties us to this particular implementation. We might want to refactor the code like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  return zip(xs, ys).reverse()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then the return type would change to &lt;code class=&quot;highlighter-rouge&quot;&gt;[(T,U)]&lt;/code&gt; and all the callers would have to be updated. Clearly we’re leaking too much information about our implementation. What’s the point of &lt;code class=&quot;highlighter-rouge&quot;&gt;reverseZip&lt;/code&gt;? Is it to return a &lt;code class=&quot;highlighter-rouge&quot;&gt;Zip2Sequence&amp;lt;...&amp;gt;&lt;/code&gt;? No. It’s to return a sequence of tuples. We want a type that means “a sequence of tuples.” Often we use &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; for that, but there’s an even less restrictive way that doesn’t require making an extra copy: &lt;code class=&quot;highlighter-rouge&quot;&gt;AnySequence&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func reverseZip&amp;lt;T,U&amp;gt;(xs: [T], _ ys: [U]) -&amp;gt; AnySequence&amp;lt;(T,U)&amp;gt; {
    return AnySequence(zip(xs, ys).reverse())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can keep our implementation details private. If we have some internal sequence type, we don’t have to share it with our callers. We just give them what they need and no more.&lt;/p&gt;

&lt;p&gt;Notice that &lt;code class=&quot;highlighter-rouge&quot;&gt;AnySequence&lt;/code&gt; is not a protocol. It’s a generic &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; that wraps another sequence. You can’t use an &lt;code class=&quot;highlighter-rouge&quot;&gt;[Int]&lt;/code&gt; in a place that expects an &lt;code class=&quot;highlighter-rouge&quot;&gt;AnySequence&amp;lt;Int&amp;gt;&lt;/code&gt;. You still want to use &lt;code class=&quot;highlighter-rouge&quot;&gt;SequenceType&lt;/code&gt; for parameters in most cases.&lt;/p&gt;

&lt;p&gt;These “Any” type erasers also aren’t like &lt;code class=&quot;highlighter-rouge&quot;&gt;Any&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;AnyObject&lt;/code&gt;, which are protocols that just “hide” the type. You can still &lt;code class=&quot;highlighter-rouge&quot;&gt;as!&lt;/code&gt; an &lt;code class=&quot;highlighter-rouge&quot;&gt;AnyObject&lt;/code&gt; back to its original type. &lt;code class=&quot;highlighter-rouge&quot;&gt;AnySequence&lt;/code&gt; and its kin completely encapsulate the underlying data. You can’t get the original back. This creates a very strong abstraction layer and strengthens type safety by making &lt;code class=&quot;highlighter-rouge&quot;&gt;as!&lt;/code&gt; casting impossible.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.openradar.me/radar?id=5528602095386624&quot;&gt;The new names worry me a little&lt;/a&gt; because they make it look like &lt;code class=&quot;highlighter-rouge&quot;&gt;AnyObject&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;AnySequence&lt;/code&gt; are the same kind of thing when they’re not. But the new naming convention is definitely more flexible. You couldn’t have named the &lt;code class=&quot;highlighter-rouge&quot;&gt;AnyIndex&lt;/code&gt; types using the old &lt;code class=&quot;highlighter-rouge&quot;&gt;...Of&lt;/code&gt; convention. So, I’m getting used to the new names.&lt;/p&gt;

&lt;h2 id=&quot;chains-of-association&quot;&gt;Chains of Association&lt;/h2&gt;

&lt;p&gt;Hopefully by now you’re sold on why you’d want to use a type eraser. But would you ever want to build one? Let’s look at an example that comes up pretty often around associated types in protocols.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// An Animal can eat
protocol Animal {
    typealias Food
    func feed(food: Food)
}

// Kinds of Food
struct Grass {}
struct Worm {}

struct Cow: Animal {
    func feed(food: Grass) { print(&quot;moo&quot;) }
}

struct Goat: Animal {
    func feed(food: Grass) { print(&quot;bah&quot;) }
}

struct Bird: Animal {
    func feed(food: Worm) { print(&quot;chirp&quot;) }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So now let’s say we have a bunch of grass available and we’d like to feed it to some grass eaters. Seems easy:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for animal in grassEaters {
    animal.feed(Grass())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we just have to create this array of grass eaters. Should be simple, right? Hmmm…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let grassEaters = [Cow(), Goat()] // error: '_' is not convertible to 'Goat'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s a weird error. We probably just need to be explicit about the the type.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let grassEaters: [Animal] = [Cow(), Goat()]
// error: protocol 'Animal' can only be used as a generic constraint because it has Self or associated type requirements
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We all know that error, don’t we? OK, let’s try generics.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let grassEaters: [Animal&amp;lt;Grass&amp;gt;] = [Cow(), Goat()]
// error: protocol 'Animal' can only be used as a generic constraint because it has Self or associated type requirements
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Still? Oh right. You can’t specialize an associated type using generic syntax. That’s fine, we’ll just make the protocol generic.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;protocol Animal&amp;lt;Food&amp;gt; {
    func feed(food: Food)
}
// error: Statement cannot begin with a closure expression
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Right, protocols can’t be generic. Type-safety is for chumps. Let’s go back to Objective-C.&lt;/p&gt;

&lt;p&gt;…Or maybe type erasure is what we need. Let’s build &lt;code class=&quot;highlighter-rouge&quot;&gt;AnyAnimal&lt;/code&gt;. There are several ways to do this, but the easiest in my opinion is with closures.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct AnyAnimal&amp;lt;Food&amp;gt;: Animal {
    private let _feed: (Food) -&amp;gt; Void
    init&amp;lt;Base: Animal where Food == Base.Food&amp;gt;(_ base: Base) {
        _feed = base.feed
    }
    func feed(food: Food) { _feed(food) }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(While this works exactly like &lt;code class=&quot;highlighter-rouge&quot;&gt;AnySequence&lt;/code&gt;, this isn’t how &lt;code class=&quot;highlighter-rouge&quot;&gt;AnySequence&lt;/code&gt; is implemented. In my next post I’ll discuss why and how to implement type erasers like stdlib does.)&lt;/p&gt;

&lt;p&gt;Now we can make &lt;code class=&quot;highlighter-rouge&quot;&gt;grassEaters&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let grassEaters = [AnyAnimal(Cow()), AnyAnimal(Goat())] // Type is [AnyAnimal&amp;lt;Grass&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But we still get type safety if we try to incorrectly mix our animals:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let mixedEaters = [AnyAnimal(Cow()), AnyAnimal(Bird())]
// error: type of expression is ambiguous without more context
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This kind of type eraser lets us convert a protocol with associated types into a generic type. That means we can put it in properties and return values and other places that we can’t use protocols directly. As you use more protocols in your Swift (and &lt;a href=&quot;https://developer.apple.com/videos/wwdc/2015/?id=408&quot;&gt;you should be&lt;/a&gt;), I think this will become an important tool in your toolbelt.&lt;/p&gt;

&lt;p&gt;So get out there and erase some over-specific types. Focus on the protocol, hide the implementation.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/rnapier/03674b399e3bc517b9cd&quot;&gt;And here’s the code for your amusement.&lt;/a&gt;&lt;/p&gt;</content><author><name>Rob Napier</name></author><summary type="html">Once upon a time, when Swift was young, there were a couple of types called SequenceOf and GeneratorOf, and they could type erase stuff. “Type erase?” you may ask. “I thought we loved types.” We do. Don’t worry. Our types aren’t going anywhere. But sometimes we want them to be a little less…precise. In Swift 2, our little type erasers got a rename and some friends. Now they’re all named “Any”-something. So SequenceOf became AnySequence and GeneratorOf became AnyGenerator and there are a gaggle of indexes and collections from AnyForwardIndex to AnyRandomAccessCollection. So what are these type erasers? Let’s start with how to use one and we’ll work backwards to why. let seq = AnySequence([1,2,3]) This creates an AnySequence&amp;lt;Int&amp;gt;. It’s just a sequence of Ints that we can iterate over. Isn’t [1,2,3] also a sequence of Ints we can iterate over? Well, yeah. But it’s also explicitly an Array. And sometimes you don’t want to have to deal with that kind of implementation detail. Who Needs Types Like That? Let’s consider a little more complicated case: let xs = [1,2,3] let ys = [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;] let zs = zip(xs.reverse(), ys.reverse()) // Zip2Sequence&amp;lt;ReverseRandomAccessCollection&amp;lt;Array&amp;lt;Int&amp;gt;&amp;gt;, ReverseRandomAccessCollection&amp;lt;Array&amp;lt;String&amp;gt;&amp;gt;&amp;gt; That’s quite a type. Imagine it as the return type of a function: func reverseZip&amp;lt;T,U&amp;gt;(xs: [T], _ ys: [U]) -&amp;gt; Zip2Sequence&amp;lt;ReverseRandomAccessCollection&amp;lt;[T]&amp;gt;, ReverseRandomAccessCollection&amp;lt;[U]&amp;gt;&amp;gt; { return zip(xs.reverse(), ys.reverse()) } That’s insane. Let’s not do that. Not only is the type overwhelming, but it ties us to this particular implementation. We might want to refactor the code like this: return zip(xs, ys).reverse() Then the return type would change to [(T,U)] and all the callers would have to be updated. Clearly we’re leaking too much information about our implementation. What’s the point of reverseZip? Is it to return a Zip2Sequence&amp;lt;...&amp;gt;? No. It’s to return a sequence of tuples. We want a type that means “a sequence of tuples.” Often we use Array for that, but there’s an even less restrictive way that doesn’t require making an extra copy: AnySequence. func reverseZip&amp;lt;T,U&amp;gt;(xs: [T], _ ys: [U]) -&amp;gt; AnySequence&amp;lt;(T,U)&amp;gt; { return AnySequence(zip(xs, ys).reverse()) } Now we can keep our implementation details private. If we have some internal sequence type, we don’t have to share it with our callers. We just give them what they need and no more. Notice that AnySequence is not a protocol. It’s a generic struct that wraps another sequence. You can’t use an [Int] in a place that expects an AnySequence&amp;lt;Int&amp;gt;. You still want to use SequenceType for parameters in most cases. These “Any” type erasers also aren’t like Any and AnyObject, which are protocols that just “hide” the type. You can still as! an AnyObject back to its original type. AnySequence and its kin completely encapsulate the underlying data. You can’t get the original back. This creates a very strong abstraction layer and strengthens type safety by making as! casting impossible. The new names worry me a little because they make it look like AnyObject and AnySequence are the same kind of thing when they’re not. But the new naming convention is definitely more flexible. You couldn’t have named the AnyIndex types using the old ...Of convention. So, I’m getting used to the new names. Chains of Association Hopefully by now you’re sold on why you’d want to use a type eraser. But would you ever want to build one? Let’s look at an example that comes up pretty often around associated types in protocols. // An Animal can eat protocol Animal { typealias Food func feed(food: Food) } // Kinds of Food struct Grass {} struct Worm {} struct Cow: Animal { func feed(food: Grass) { print(&quot;moo&quot;) } } struct Goat: Animal { func feed(food: Grass) { print(&quot;bah&quot;) } } struct Bird: Animal { func feed(food: Worm) { print(&quot;chirp&quot;) } } So now let’s say we have a bunch of grass available and we’d like to feed it to some grass eaters. Seems easy: for animal in grassEaters { animal.feed(Grass()) } Now we just have to create this array of grass eaters. Should be simple, right? Hmmm… let grassEaters = [Cow(), Goat()] // error: '_' is not convertible to 'Goat' That’s a weird error. We probably just need to be explicit about the the type. let grassEaters: [Animal] = [Cow(), Goat()] // error: protocol 'Animal' can only be used as a generic constraint because it has Self or associated type requirements We all know that error, don’t we? OK, let’s try generics. let grassEaters: [Animal&amp;lt;Grass&amp;gt;] = [Cow(), Goat()] // error: protocol 'Animal' can only be used as a generic constraint because it has Self or associated type requirements Still? Oh right. You can’t specialize an associated type using generic syntax. That’s fine, we’ll just make the protocol generic. protocol Animal&amp;lt;Food&amp;gt; { func feed(food: Food) } // error: Statement cannot begin with a closure expression Right, protocols can’t be generic. Type-safety is for chumps. Let’s go back to Objective-C. …Or maybe type erasure is what we need. Let’s build AnyAnimal. There are several ways to do this, but the easiest in my opinion is with closures. struct AnyAnimal&amp;lt;Food&amp;gt;: Animal { private let _feed: (Food) -&amp;gt; Void init&amp;lt;Base: Animal where Food == Base.Food&amp;gt;(_ base: Base) { _feed = base.feed } func feed(food: Food) { _feed(food) } } (While this works exactly like AnySequence, this isn’t how AnySequence is implemented. In my next post I’ll discuss why and how to implement type erasers like stdlib does.) Now we can make grassEaters: let grassEaters = [AnyAnimal(Cow()), AnyAnimal(Goat())] // Type is [AnyAnimal&amp;lt;Grass&amp;gt;] But we still get type safety if we try to incorrectly mix our animals: let mixedEaters = [AnyAnimal(Cow()), AnyAnimal(Bird())] // error: type of expression is ambiguous without more context This kind of type eraser lets us convert a protocol with associated types into a generic type. That means we can put it in properties and return values and other places that we can’t use protocols directly. As you use more protocols in your Swift (and you should be), I think this will become an important tool in your toolbelt. So get out there and erase some over-specific types. Focus on the protocol, hide the implementation. And here’s the code for your amusement.</summary></entry></feed>